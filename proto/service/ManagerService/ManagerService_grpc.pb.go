// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ManagerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	//区域创建
	CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaResp, error)
	//区域编辑
	EditArea(ctx context.Context, in *EditAreaReq, opts ...grpc.CallOption) (*EditAreaResp, error)
	//区域删除
	DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaResp, error)
	//区域列表
	ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error)
	//通用区域列表
	CommonListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error)
	//上传合同 鹰潭  20211109
	ContractUpload(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error)
	// 20211103 濮阳三期  新增 回款情况 报表
	ReturnZoneList(ctx context.Context, in *ReturnZoneListReq, opts ...grpc.CallOption) (*ReturnZoneListResp, error)
	ReturnMiList(ctx context.Context, in *ReturnMiListReq, opts ...grpc.CallOption) (*ReturnMiListResp, error)
	ReturnMiMedicineList(ctx context.Context, in *ReturnMiMedicineListReq, opts ...grpc.CallOption) (*ReturnMiMedicineListResp, error)
	// 20211027 鹰潭新增  合同药品国家规则
	// 合同药品国家规则 列表
	ContractProportionList(ctx context.Context, in *ContractProportionListReq, opts ...grpc.CallOption) (*ContractProportionListResp, error)
	// 合同药品国家规则 更新
	ContractProportionUpdate(ctx context.Context, in *ContractProportionUpdateReq, opts ...grpc.CallOption) (*ContractProportionUpdateResp, error)
	// 删除订单
	RemovePlans(ctx context.Context, in *RemovePlansReq, opts ...grpc.CallOption) (*RemovePlansResp, error)
	// 接单
	ReceivePlans(ctx context.Context, in *ReceivePlansReq, opts ...grpc.CallOption) (*ReceivePlansResp, error)
	// 待接单列表
	WaitList(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error)
	// 拆单
	SplitToPlan(ctx context.Context, in *SplitToPlanReq, opts ...grpc.CallOption) (*SplitToPlanResp, error)
	//招采单列表
	ListZC(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error)
	//平台创建招采单逻辑
	CreateShipmentZC(ctx context.Context, in *CreateZCReq, opts ...grpc.CallOption) (*CreateZCResp, error)
	//删除未拆单且未过期的招采单
	DeleteShipmentZC(ctx context.Context, in *DeleteZCReq, opts ...grpc.CallOption) (*DeleteZCResp, error)
	// 招采详情补充
	DetailSupplement(ctx context.Context, in *DetailSupplementReq, opts ...grpc.CallOption) (*DetailSupplementResp, error)
	//鹰潭 招采详情 订单列表
	DetailPlanList(ctx context.Context, in *DetailPlanListReq, opts ...grpc.CallOption) (*DetailPlanListResp, error)
	//合同相关
	//新建合同
	ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error)
	// 删除合同
	ContractRemove(ctx context.Context, in *ContractRemoveReq, opts ...grpc.CallOption) (*ContractRemoveResp, error)
	// 停用合同
	ContractStop(ctx context.Context, in *ContractStopReq, opts ...grpc.CallOption) (*ContractStopResp, error)
	// 编辑合同
	ContractEdit(ctx context.Context, in *ContractEditReq, opts ...grpc.CallOption) (*ContractEditResp, error)
	ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error)
	ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error)
	CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error)
	UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error)
	BatchOperateContract(ctx context.Context, in *BatchOperateContractReq, opts ...grpc.CallOption) (*BatchOperateContractResp, error)
	UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error)
	DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error)
	DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error)
	GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error)
	CountContract(ctx context.Context, in *CountContractReq, opts ...grpc.CallOption) (*CountContractResp, error)
	RefreshContract(ctx context.Context, in *RefreshContractReq, opts ...grpc.CallOption) (*RefreshContractResp, error)
	//合同重置
	ResetContract(ctx context.Context, in *ResetContractReq, opts ...grpc.CallOption) (*ResetContractResp, error)
	//暂未使用
	ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error)
	CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error)
	MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error)
	CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error)
	CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error)
	UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error)
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error)
	DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error)
	TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error)
	DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error)
	CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error)
	CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error)
	UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error)
	CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error)
	UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error)
	CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error)
	SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error)
	CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error)
	//通用配置查询
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(ctx context.Context, in *ListCompanyBindReq, opts ...grpc.CallOption) (*ListCompanyBindResp, error)
	CompanyBind(ctx context.Context, in *CompanyBindReq, opts ...grpc.CallOption) (*CompanyBindResp, error)
	//医疗机构绑定
	ListMiBind(ctx context.Context, in *ListMiBindReq, opts ...grpc.CallOption) (*ListMiBindResp, error)
	MiBind(ctx context.Context, in *MiBindReq, opts ...grpc.CallOption) (*MiBindResp, error)
	//药品绑定绑定
	ListMedicineBind(ctx context.Context, in *ListMedicineBindReq, opts ...grpc.CallOption) (*ListMedicineBindResp, error)
	MedicineBind(ctx context.Context, in *MedicineBindReq, opts ...grpc.CallOption) (*MedicineBindResp, error)
	// 由 contractMiId 列表 获取 主合同列表
	ListContractsByMiContractIds(ctx context.Context, in *MiContractIdsReq, opts ...grpc.CallOption) (*ListContractsResp, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaResp, error) {
	out := new(CreateAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) EditArea(ctx context.Context, in *EditAreaReq, opts ...grpc.CallOption) (*EditAreaResp, error) {
	out := new(EditAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/EditArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaResp, error) {
	out := new(DeleteAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error) {
	out := new(ListAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error) {
	out := new(ListAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractUpload(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnZoneList(ctx context.Context, in *ReturnZoneListReq, opts ...grpc.CallOption) (*ReturnZoneListResp, error) {
	out := new(ReturnZoneListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnZoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnMiList(ctx context.Context, in *ReturnMiListReq, opts ...grpc.CallOption) (*ReturnMiListResp, error) {
	out := new(ReturnMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnMiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnMiMedicineList(ctx context.Context, in *ReturnMiMedicineListReq, opts ...grpc.CallOption) (*ReturnMiMedicineListResp, error) {
	out := new(ReturnMiMedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnMiMedicineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractProportionList(ctx context.Context, in *ContractProportionListReq, opts ...grpc.CallOption) (*ContractProportionListResp, error) {
	out := new(ContractProportionListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractProportionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractProportionUpdate(ctx context.Context, in *ContractProportionUpdateReq, opts ...grpc.CallOption) (*ContractProportionUpdateResp, error) {
	out := new(ContractProportionUpdateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractProportionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RemovePlans(ctx context.Context, in *RemovePlansReq, opts ...grpc.CallOption) (*RemovePlansResp, error) {
	out := new(RemovePlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/RemovePlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceivePlans(ctx context.Context, in *ReceivePlansReq, opts ...grpc.CallOption) (*ReceivePlansResp, error) {
	out := new(ReceivePlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceivePlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) WaitList(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error) {
	out := new(ListZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/WaitList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SplitToPlan(ctx context.Context, in *SplitToPlanReq, opts ...grpc.CallOption) (*SplitToPlanResp, error) {
	out := new(SplitToPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SplitToPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListZC(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error) {
	out := new(ListZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentZC(ctx context.Context, in *CreateZCReq, opts ...grpc.CallOption) (*CreateZCResp, error) {
	out := new(CreateZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteShipmentZC(ctx context.Context, in *DeleteZCReq, opts ...grpc.CallOption) (*DeleteZCResp, error) {
	out := new(DeleteZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteShipmentZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailSupplement(ctx context.Context, in *DetailSupplementReq, opts ...grpc.CallOption) (*DetailSupplementResp, error) {
	out := new(DetailSupplementResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailPlanList(ctx context.Context, in *DetailPlanListReq, opts ...grpc.CallOption) (*DetailPlanListResp, error) {
	out := new(DetailPlanListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailPlanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractRemove(ctx context.Context, in *ContractRemoveReq, opts ...grpc.CallOption) (*ContractRemoveResp, error) {
	out := new(ContractRemoveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractStop(ctx context.Context, in *ContractStopReq, opts ...grpc.CallOption) (*ContractStopResp, error) {
	out := new(ContractStopResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractEdit(ctx context.Context, in *ContractEditReq, opts ...grpc.CallOption) (*ContractEditResp, error) {
	out := new(ContractEditResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error) {
	out := new(ContractMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error) {
	out := new(CreateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error) {
	out := new(UpdateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error) {
	out := new(UpdateOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) BatchOperateContract(ctx context.Context, in *BatchOperateContractReq, opts ...grpc.CallOption) (*BatchOperateContractResp, error) {
	out := new(BatchOperateContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/BatchOperateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error) {
	out := new(UpdateContractActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateContractActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error) {
	out := new(DeleteOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error) {
	out := new(DeleteOneContractMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContractMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error) {
	out := new(GetContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountContract(ctx context.Context, in *CountContractReq, opts ...grpc.CallOption) (*CountContractResp, error) {
	out := new(CountContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RefreshContract(ctx context.Context, in *RefreshContractReq, opts ...grpc.CallOption) (*RefreshContractResp, error) {
	out := new(RefreshContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/RefreshContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ResetContract(ctx context.Context, in *ResetContractReq, opts ...grpc.CallOption) (*ResetContractResp, error) {
	out := new(ResetContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ResetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error) {
	out := new(ContractDetailResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error) {
	out := new(CheckContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CheckContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error) {
	out := new(MedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error) {
	out := new(MedicineListForQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineListForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error) {
	out := new(CreateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error) {
	out := new(CreateBatchMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBatchMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error) {
	out := new(UpdateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error) {
	out := new(UpdateMedicineActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicineActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error) {
	out := new(DeleteMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error) {
	out := new(SelectTagByMedicineIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectTagByMedicineId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error) {
	out := new(SelectInfoByMedicineNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectInfoByMedicineNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error) {
	out := new(TagListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error) {
	out := new(UpdateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error) {
	out := new(DeleteTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error) {
	out := new(TagDetailListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error) {
	out := new(DeleteTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error) {
	out := new(CreateTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error) {
	out := new(CommonMedicineQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMedicineQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error) {
	out := new(ListMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error) {
	out := new(CommonMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error) {
	out := new(CreateOneMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error) {
	out := new(UpdateMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error) {
	out := new(ListCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error) {
	out := new(CreateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error) {
	out := new(UpdateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error) {
	out := new(CommonCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error) {
	out := new(SelCompanyByNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelCompanyByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error) {
	out := new(ListTpPlanErrResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListTpPlanErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error) {
	out := new(UpdateErrShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateErrShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error) {
	out := new(ListShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error) {
	out := new(CountShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error) {
	out := new(DetailShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error) {
	out := new(ListShipmentPlanForOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlanForOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error) {
	out := new(CreateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error) {
	out := new(ListShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error) {
	out := new(CountShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error) {
	out := new(ReceiveShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceiveShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error) {
	out := new(GetContractByShipmentPlanIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractByShipmentPlanId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error) {
	out := new(InsertConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/InsertConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error) {
	out := new(DeleteConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompanyBind(ctx context.Context, in *ListCompanyBindReq, opts ...grpc.CallOption) (*ListCompanyBindResp, error) {
	out := new(ListCompanyBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CompanyBind(ctx context.Context, in *CompanyBindReq, opts ...grpc.CallOption) (*CompanyBindResp, error) {
	out := new(CompanyBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiBind(ctx context.Context, in *ListMiBindReq, opts ...grpc.CallOption) (*ListMiBindResp, error) {
	out := new(ListMiBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MiBind(ctx context.Context, in *MiBindReq, opts ...grpc.CallOption) (*MiBindResp, error) {
	out := new(MiBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicineBind(ctx context.Context, in *ListMedicineBindReq, opts ...grpc.CallOption) (*ListMedicineBindResp, error) {
	out := new(ListMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineBind(ctx context.Context, in *MedicineBindReq, opts ...grpc.CallOption) (*MedicineBindResp, error) {
	out := new(MedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListContractsByMiContractIds(ctx context.Context, in *MiContractIdsReq, opts ...grpc.CallOption) (*ListContractsResp, error) {
	out := new(ListContractsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContractsByMiContractIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations must embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	//区域创建
	CreateArea(context.Context, *CreateAreaReq) (*CreateAreaResp, error)
	//区域编辑
	EditArea(context.Context, *EditAreaReq) (*EditAreaResp, error)
	//区域删除
	DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaResp, error)
	//区域列表
	ListArea(context.Context, *ListAreaReq) (*ListAreaResp, error)
	//通用区域列表
	CommonListArea(context.Context, *ListAreaReq) (*ListAreaResp, error)
	//上传合同 鹰潭  20211109
	ContractUpload(context.Context, *ContractCreateReq) (*ContractCreateResp, error)
	// 20211103 濮阳三期  新增 回款情况 报表
	ReturnZoneList(context.Context, *ReturnZoneListReq) (*ReturnZoneListResp, error)
	ReturnMiList(context.Context, *ReturnMiListReq) (*ReturnMiListResp, error)
	ReturnMiMedicineList(context.Context, *ReturnMiMedicineListReq) (*ReturnMiMedicineListResp, error)
	// 20211027 鹰潭新增  合同药品国家规则
	// 合同药品国家规则 列表
	ContractProportionList(context.Context, *ContractProportionListReq) (*ContractProportionListResp, error)
	// 合同药品国家规则 更新
	ContractProportionUpdate(context.Context, *ContractProportionUpdateReq) (*ContractProportionUpdateResp, error)
	// 删除订单
	RemovePlans(context.Context, *RemovePlansReq) (*RemovePlansResp, error)
	// 接单
	ReceivePlans(context.Context, *ReceivePlansReq) (*ReceivePlansResp, error)
	// 待接单列表
	WaitList(context.Context, *ListZCReq) (*ListZCResp, error)
	// 拆单
	SplitToPlan(context.Context, *SplitToPlanReq) (*SplitToPlanResp, error)
	//招采单列表
	ListZC(context.Context, *ListZCReq) (*ListZCResp, error)
	//平台创建招采单逻辑
	CreateShipmentZC(context.Context, *CreateZCReq) (*CreateZCResp, error)
	//删除未拆单且未过期的招采单
	DeleteShipmentZC(context.Context, *DeleteZCReq) (*DeleteZCResp, error)
	// 招采详情补充
	DetailSupplement(context.Context, *DetailSupplementReq) (*DetailSupplementResp, error)
	//鹰潭 招采详情 订单列表
	DetailPlanList(context.Context, *DetailPlanListReq) (*DetailPlanListResp, error)
	//合同相关
	//新建合同
	ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error)
	// 删除合同
	ContractRemove(context.Context, *ContractRemoveReq) (*ContractRemoveResp, error)
	// 停用合同
	ContractStop(context.Context, *ContractStopReq) (*ContractStopResp, error)
	// 编辑合同
	ContractEdit(context.Context, *ContractEditReq) (*ContractEditResp, error)
	ListContract(context.Context, *ContractListReq) (*ContractListResp, error)
	ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error)
	CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error)
	UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error)
	BatchOperateContract(context.Context, *BatchOperateContractReq) (*BatchOperateContractResp, error)
	UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error)
	DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error)
	DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error)
	GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error)
	CountContract(context.Context, *CountContractReq) (*CountContractResp, error)
	RefreshContract(context.Context, *RefreshContractReq) (*RefreshContractResp, error)
	//合同重置
	ResetContract(context.Context, *ResetContractReq) (*ResetContractResp, error)
	//暂未使用
	ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error)
	CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error)
	MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error)
	CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error)
	CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error)
	UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error)
	UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(context.Context, *TagListReq) (*TagListResp, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error)
	DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error)
	TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error)
	DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(context.Context, *ListMiReq) (*ListMiResp, error)
	CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error)
	CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error)
	UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error)
	CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error)
	UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error)
	CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error)
	SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error)
	CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error)
	//通用配置查询
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(context.Context, *ListCompanyBindReq) (*ListCompanyBindResp, error)
	CompanyBind(context.Context, *CompanyBindReq) (*CompanyBindResp, error)
	//医疗机构绑定
	ListMiBind(context.Context, *ListMiBindReq) (*ListMiBindResp, error)
	MiBind(context.Context, *MiBindReq) (*MiBindResp, error)
	//药品绑定绑定
	ListMedicineBind(context.Context, *ListMedicineBindReq) (*ListMedicineBindResp, error)
	MedicineBind(context.Context, *MedicineBindReq) (*MedicineBindResp, error)
	// 由 contractMiId 列表 获取 主合同列表
	ListContractsByMiContractIds(context.Context, *MiContractIdsReq) (*ListContractsResp, error)
	mustEmbedUnimplementedManagerServiceServer()
}

// UnimplementedManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) CreateArea(context.Context, *CreateAreaReq) (*CreateAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArea not implemented")
}
func (UnimplementedManagerServiceServer) EditArea(context.Context, *EditAreaReq) (*EditAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArea not implemented")
}
func (UnimplementedManagerServiceServer) DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (UnimplementedManagerServiceServer) ListArea(context.Context, *ListAreaReq) (*ListAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArea not implemented")
}
func (UnimplementedManagerServiceServer) CommonListArea(context.Context, *ListAreaReq) (*ListAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonListArea not implemented")
}
func (UnimplementedManagerServiceServer) ContractUpload(context.Context, *ContractCreateReq) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractUpload not implemented")
}
func (UnimplementedManagerServiceServer) ReturnZoneList(context.Context, *ReturnZoneListReq) (*ReturnZoneListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnZoneList not implemented")
}
func (UnimplementedManagerServiceServer) ReturnMiList(context.Context, *ReturnMiListReq) (*ReturnMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnMiList not implemented")
}
func (UnimplementedManagerServiceServer) ReturnMiMedicineList(context.Context, *ReturnMiMedicineListReq) (*ReturnMiMedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnMiMedicineList not implemented")
}
func (UnimplementedManagerServiceServer) ContractProportionList(context.Context, *ContractProportionListReq) (*ContractProportionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractProportionList not implemented")
}
func (UnimplementedManagerServiceServer) ContractProportionUpdate(context.Context, *ContractProportionUpdateReq) (*ContractProportionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractProportionUpdate not implemented")
}
func (UnimplementedManagerServiceServer) RemovePlans(context.Context, *RemovePlansReq) (*RemovePlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlans not implemented")
}
func (UnimplementedManagerServiceServer) ReceivePlans(context.Context, *ReceivePlansReq) (*ReceivePlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePlans not implemented")
}
func (UnimplementedManagerServiceServer) WaitList(context.Context, *ListZCReq) (*ListZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitList not implemented")
}
func (UnimplementedManagerServiceServer) SplitToPlan(context.Context, *SplitToPlanReq) (*SplitToPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitToPlan not implemented")
}
func (UnimplementedManagerServiceServer) ListZC(context.Context, *ListZCReq) (*ListZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListZC not implemented")
}
func (UnimplementedManagerServiceServer) CreateShipmentZC(context.Context, *CreateZCReq) (*CreateZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentZC not implemented")
}
func (UnimplementedManagerServiceServer) DeleteShipmentZC(context.Context, *DeleteZCReq) (*DeleteZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShipmentZC not implemented")
}
func (UnimplementedManagerServiceServer) DetailSupplement(context.Context, *DetailSupplementReq) (*DetailSupplementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailSupplement not implemented")
}
func (UnimplementedManagerServiceServer) DetailPlanList(context.Context, *DetailPlanListReq) (*DetailPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPlanList not implemented")
}
func (UnimplementedManagerServiceServer) ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCreate not implemented")
}
func (UnimplementedManagerServiceServer) ContractRemove(context.Context, *ContractRemoveReq) (*ContractRemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractRemove not implemented")
}
func (UnimplementedManagerServiceServer) ContractStop(context.Context, *ContractStopReq) (*ContractStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractStop not implemented")
}
func (UnimplementedManagerServiceServer) ContractEdit(context.Context, *ContractEditReq) (*ContractEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEdit not implemented")
}
func (UnimplementedManagerServiceServer) ListContract(context.Context, *ContractListReq) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContract not implemented")
}
func (UnimplementedManagerServiceServer) ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiContract not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneContractMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContractMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContract not implemented")
}
func (UnimplementedManagerServiceServer) BatchOperateContract(context.Context, *BatchOperateContractReq) (*BatchOperateContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateContract not implemented")
}
func (UnimplementedManagerServiceServer) UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractActive not implemented")
}
func (UnimplementedManagerServiceServer) DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContract not implemented")
}
func (UnimplementedManagerServiceServer) DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContractMi not implemented")
}
func (UnimplementedManagerServiceServer) GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (UnimplementedManagerServiceServer) CountContract(context.Context, *CountContractReq) (*CountContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountContract not implemented")
}
func (UnimplementedManagerServiceServer) RefreshContract(context.Context, *RefreshContractReq) (*RefreshContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContract not implemented")
}
func (UnimplementedManagerServiceServer) ResetContract(context.Context, *ResetContractReq) (*ResetContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetContract not implemented")
}
func (UnimplementedManagerServiceServer) ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractDetail not implemented")
}
func (UnimplementedManagerServiceServer) CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContractList not implemented")
}
func (UnimplementedManagerServiceServer) ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicine not implemented")
}
func (UnimplementedManagerServiceServer) MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineListForQuery not implemented")
}
func (UnimplementedManagerServiceServer) CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedManagerServiceServer) CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchMedicine not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineActive not implemented")
}
func (UnimplementedManagerServiceServer) DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (UnimplementedManagerServiceServer) SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagByMedicineId not implemented")
}
func (UnimplementedManagerServiceServer) SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInfoByMedicineNames not implemented")
}
func (UnimplementedManagerServiceServer) TagList(context.Context, *TagListReq) (*TagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagList not implemented")
}
func (UnimplementedManagerServiceServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedManagerServiceServer) UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedManagerServiceServer) DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedManagerServiceServer) TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDetailList not implemented")
}
func (UnimplementedManagerServiceServer) DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagMedicine not implemented")
}
func (UnimplementedManagerServiceServer) CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagMedicine not implemented")
}
func (UnimplementedManagerServiceServer) CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMedicineQuery not implemented")
}
func (UnimplementedManagerServiceServer) ListMi(context.Context, *ListMiReq) (*ListMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMi not implemented")
}
func (UnimplementedManagerServiceServer) CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMI not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMi not implemented")
}
func (UnimplementedManagerServiceServer) ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompany not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneCompany not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneCompany not implemented")
}
func (UnimplementedManagerServiceServer) CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonCompany not implemented")
}
func (UnimplementedManagerServiceServer) SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelCompanyByNames not implemented")
}
func (UnimplementedManagerServiceServer) ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTpPlanErr not implemented")
}
func (UnimplementedManagerServiceServer) UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErrShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlanForOrder not implemented")
}
func (UnimplementedManagerServiceServer) CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractByShipmentPlanId not implemented")
}
func (UnimplementedManagerServiceServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedManagerServiceServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedManagerServiceServer) InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertConfigs not implemented")
}
func (UnimplementedManagerServiceServer) DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigs not implemented")
}
func (UnimplementedManagerServiceServer) ListCompanyBind(context.Context, *ListCompanyBindReq) (*ListCompanyBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyBind not implemented")
}
func (UnimplementedManagerServiceServer) CompanyBind(context.Context, *CompanyBindReq) (*CompanyBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyBind not implemented")
}
func (UnimplementedManagerServiceServer) ListMiBind(context.Context, *ListMiBindReq) (*ListMiBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiBind not implemented")
}
func (UnimplementedManagerServiceServer) MiBind(context.Context, *MiBindReq) (*MiBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiBind not implemented")
}
func (UnimplementedManagerServiceServer) ListMedicineBind(context.Context, *ListMedicineBindReq) (*ListMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineBind not implemented")
}
func (UnimplementedManagerServiceServer) MedicineBind(context.Context, *MedicineBindReq) (*MedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineBind not implemented")
}
func (UnimplementedManagerServiceServer) ListContractsByMiContractIds(context.Context, *MiContractIdsReq) (*ListContractsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractsByMiContractIds not implemented")
}
func (UnimplementedManagerServiceServer) mustEmbedUnimplementedManagerServiceServer() {}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_CreateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateArea(ctx, req.(*CreateAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_EditArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).EditArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/EditArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).EditArea(ctx, req.(*EditAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteArea(ctx, req.(*DeleteAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListArea(ctx, req.(*ListAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonListArea(ctx, req.(*ListAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractUpload(ctx, req.(*ContractCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnZoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnZoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnZoneList(ctx, req.(*ReturnZoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnMiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnMiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnMiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnMiList(ctx, req.(*ReturnMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnMiMedicineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnMiMedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnMiMedicineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnMiMedicineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnMiMedicineList(ctx, req.(*ReturnMiMedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractProportionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractProportionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractProportionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractProportionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractProportionList(ctx, req.(*ContractProportionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractProportionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractProportionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractProportionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractProportionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractProportionUpdate(ctx, req.(*ContractProportionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RemovePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RemovePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/RemovePlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RemovePlans(ctx, req.(*RemovePlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceivePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivePlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceivePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceivePlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceivePlans(ctx, req.(*ReceivePlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_WaitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).WaitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/WaitList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).WaitList(ctx, req.(*ListZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SplitToPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitToPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SplitToPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SplitToPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SplitToPlan(ctx, req.(*SplitToPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListZC(ctx, req.(*ListZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentZC(ctx, req.(*CreateZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteShipmentZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteShipmentZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteShipmentZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteShipmentZC(ctx, req.(*DeleteZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailSupplementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailSupplement(ctx, req.(*DetailSupplementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailPlanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailPlanList(ctx, req.(*DetailPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractCreate(ctx, req.(*ContractCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractRemove(ctx, req.(*ContractRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractStop(ctx, req.(*ContractStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractEdit(ctx, req.(*ContractEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContract(ctx, req.(*ContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiContract(ctx, req.(*ContractMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, req.(*CreateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, req.(*UpdateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, req.(*UpdateOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_BatchOperateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).BatchOperateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/BatchOperateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).BatchOperateContract(ctx, req.(*BatchOperateContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateContractActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateContractActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, req.(*UpdateContractActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, req.(*DeleteOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContractMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContractMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, req.(*DeleteOneContractMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, req.(*GetContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountContract(ctx, req.(*CountContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RefreshContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RefreshContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/RefreshContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RefreshContract(ctx, req.(*RefreshContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ResetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ResetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ResetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ResetContract(ctx, req.(*ResetContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractDetail(ctx, req.(*ContractDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CheckContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCheckContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CheckContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CheckContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CheckContractList(ctx, req.(*UpCheckContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicine(ctx, req.(*MedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineListForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListForQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineListForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, req.(*MedicineListForQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, req.(*CreateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBatchMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBatchMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, req.(*CreateBatchMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicineActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicineActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, req.(*UpdateMedicineActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectTagByMedicineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByMedicineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectTagByMedicineId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, req.(*SelectTagByMedicineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectInfoByMedicineNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInfoByMedicineNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectInfoByMedicineNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, req.(*SelectInfoByMedicineNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagList(ctx, req.(*TagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTag(ctx, req.(*UpdateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTag(ctx, req.(*DeleteTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagDetailList(ctx, req.(*TagDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, req.(*DeleteTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, req.(*CreateTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMedicineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMedicineQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMedicineQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, req.(*CommonMedicineQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMi(ctx, req.(*ListMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMI(ctx, req.(*CommonMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, req.(*CreateOneMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMi(ctx, req.(*UpdateMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompany(ctx, req.(*ListCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, req.(*CreateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, req.(*UpdateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelCompanyByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelCompanyByNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelCompanyByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, req.(*SelCompanyByNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListTpPlanErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTpPlanErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListTpPlanErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, req.(*ListTpPlanErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateErrShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateErrShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, req.(*UpdateErrShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, req.(*ListShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, req.(*CountShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, req.(*DetailShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlanForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanForOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlanForOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, req.(*ListShipmentPlanForOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, req.(*CreateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, req.(*ListShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, req.(*CountShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceiveShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceiveShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, req.(*ReceiveShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractByShipmentPlanId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractByShipmentPlanIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractByShipmentPlanId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, req.(*GetContractByShipmentPlanIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_InsertConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/InsertConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, req.(*InsertConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, req.(*DeleteConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, req.(*ListCompanyBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CompanyBind(ctx, req.(*CompanyBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiBind(ctx, req.(*ListMiBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MiBind(ctx, req.(*MiBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, req.(*ListMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineBind(ctx, req.(*MedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListContractsByMiContractIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiContractIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContractsByMiContractIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContractsByMiContractIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContractsByMiContractIds(ctx, req.(*MiContractIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArea",
			Handler:    _ManagerService_CreateArea_Handler,
		},
		{
			MethodName: "EditArea",
			Handler:    _ManagerService_EditArea_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _ManagerService_DeleteArea_Handler,
		},
		{
			MethodName: "ListArea",
			Handler:    _ManagerService_ListArea_Handler,
		},
		{
			MethodName: "CommonListArea",
			Handler:    _ManagerService_CommonListArea_Handler,
		},
		{
			MethodName: "ContractUpload",
			Handler:    _ManagerService_ContractUpload_Handler,
		},
		{
			MethodName: "ReturnZoneList",
			Handler:    _ManagerService_ReturnZoneList_Handler,
		},
		{
			MethodName: "ReturnMiList",
			Handler:    _ManagerService_ReturnMiList_Handler,
		},
		{
			MethodName: "ReturnMiMedicineList",
			Handler:    _ManagerService_ReturnMiMedicineList_Handler,
		},
		{
			MethodName: "ContractProportionList",
			Handler:    _ManagerService_ContractProportionList_Handler,
		},
		{
			MethodName: "ContractProportionUpdate",
			Handler:    _ManagerService_ContractProportionUpdate_Handler,
		},
		{
			MethodName: "RemovePlans",
			Handler:    _ManagerService_RemovePlans_Handler,
		},
		{
			MethodName: "ReceivePlans",
			Handler:    _ManagerService_ReceivePlans_Handler,
		},
		{
			MethodName: "WaitList",
			Handler:    _ManagerService_WaitList_Handler,
		},
		{
			MethodName: "SplitToPlan",
			Handler:    _ManagerService_SplitToPlan_Handler,
		},
		{
			MethodName: "ListZC",
			Handler:    _ManagerService_ListZC_Handler,
		},
		{
			MethodName: "CreateShipmentZC",
			Handler:    _ManagerService_CreateShipmentZC_Handler,
		},
		{
			MethodName: "DeleteShipmentZC",
			Handler:    _ManagerService_DeleteShipmentZC_Handler,
		},
		{
			MethodName: "DetailSupplement",
			Handler:    _ManagerService_DetailSupplement_Handler,
		},
		{
			MethodName: "DetailPlanList",
			Handler:    _ManagerService_DetailPlanList_Handler,
		},
		{
			MethodName: "ContractCreate",
			Handler:    _ManagerService_ContractCreate_Handler,
		},
		{
			MethodName: "ContractRemove",
			Handler:    _ManagerService_ContractRemove_Handler,
		},
		{
			MethodName: "ContractStop",
			Handler:    _ManagerService_ContractStop_Handler,
		},
		{
			MethodName: "ContractEdit",
			Handler:    _ManagerService_ContractEdit_Handler,
		},
		{
			MethodName: "ListContract",
			Handler:    _ManagerService_ListContract_Handler,
		},
		{
			MethodName: "ListMiContract",
			Handler:    _ManagerService_ListMiContract_Handler,
		},
		{
			MethodName: "CreateOneContractMI",
			Handler:    _ManagerService_CreateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContractMI",
			Handler:    _ManagerService_UpdateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContract",
			Handler:    _ManagerService_UpdateOneContract_Handler,
		},
		{
			MethodName: "BatchOperateContract",
			Handler:    _ManagerService_BatchOperateContract_Handler,
		},
		{
			MethodName: "UpdateContractActive",
			Handler:    _ManagerService_UpdateContractActive_Handler,
		},
		{
			MethodName: "DeleteOneContract",
			Handler:    _ManagerService_DeleteOneContract_Handler,
		},
		{
			MethodName: "DeleteOneContractMi",
			Handler:    _ManagerService_DeleteOneContractMi_Handler,
		},
		{
			MethodName: "GetContractInfo",
			Handler:    _ManagerService_GetContractInfo_Handler,
		},
		{
			MethodName: "CountContract",
			Handler:    _ManagerService_CountContract_Handler,
		},
		{
			MethodName: "RefreshContract",
			Handler:    _ManagerService_RefreshContract_Handler,
		},
		{
			MethodName: "ResetContract",
			Handler:    _ManagerService_ResetContract_Handler,
		},
		{
			MethodName: "ContractDetail",
			Handler:    _ManagerService_ContractDetail_Handler,
		},
		{
			MethodName: "CheckContractList",
			Handler:    _ManagerService_CheckContractList_Handler,
		},
		{
			MethodName: "ListMedicine",
			Handler:    _ManagerService_ListMedicine_Handler,
		},
		{
			MethodName: "MedicineListForQuery",
			Handler:    _ManagerService_MedicineListForQuery_Handler,
		},
		{
			MethodName: "CreateMedicine",
			Handler:    _ManagerService_CreateMedicine_Handler,
		},
		{
			MethodName: "CreateBatchMedicine",
			Handler:    _ManagerService_CreateBatchMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _ManagerService_UpdateMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicineActive",
			Handler:    _ManagerService_UpdateMedicineActive_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _ManagerService_DeleteMedicine_Handler,
		},
		{
			MethodName: "SelectTagByMedicineId",
			Handler:    _ManagerService_SelectTagByMedicineId_Handler,
		},
		{
			MethodName: "SelectInfoByMedicineNames",
			Handler:    _ManagerService_SelectInfoByMedicineNames_Handler,
		},
		{
			MethodName: "TagList",
			Handler:    _ManagerService_TagList_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ManagerService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ManagerService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ManagerService_DeleteTag_Handler,
		},
		{
			MethodName: "TagDetailList",
			Handler:    _ManagerService_TagDetailList_Handler,
		},
		{
			MethodName: "DeleteTagMedicine",
			Handler:    _ManagerService_DeleteTagMedicine_Handler,
		},
		{
			MethodName: "CreateTagMedicine",
			Handler:    _ManagerService_CreateTagMedicine_Handler,
		},
		{
			MethodName: "CommonMedicineQuery",
			Handler:    _ManagerService_CommonMedicineQuery_Handler,
		},
		{
			MethodName: "ListMi",
			Handler:    _ManagerService_ListMi_Handler,
		},
		{
			MethodName: "CommonMI",
			Handler:    _ManagerService_CommonMI_Handler,
		},
		{
			MethodName: "CreateOneMI",
			Handler:    _ManagerService_CreateOneMI_Handler,
		},
		{
			MethodName: "UpdateMi",
			Handler:    _ManagerService_UpdateMi_Handler,
		},
		{
			MethodName: "ListCompany",
			Handler:    _ManagerService_ListCompany_Handler,
		},
		{
			MethodName: "CreateOneCompany",
			Handler:    _ManagerService_CreateOneCompany_Handler,
		},
		{
			MethodName: "UpdateOneCompany",
			Handler:    _ManagerService_UpdateOneCompany_Handler,
		},
		{
			MethodName: "CommonCompany",
			Handler:    _ManagerService_CommonCompany_Handler,
		},
		{
			MethodName: "SelCompanyByNames",
			Handler:    _ManagerService_SelCompanyByNames_Handler,
		},
		{
			MethodName: "ListTpPlanErr",
			Handler:    _ManagerService_ListTpPlanErr_Handler,
		},
		{
			MethodName: "UpdateErrShipmentPlan",
			Handler:    _ManagerService_UpdateErrShipmentPlan_Handler,
		},
		{
			MethodName: "ListShipmentPlan",
			Handler:    _ManagerService_ListShipmentPlan_Handler,
		},
		{
			MethodName: "CountShipmentPlan",
			Handler:    _ManagerService_CountShipmentPlan_Handler,
		},
		{
			MethodName: "DetailShipmentOrder",
			Handler:    _ManagerService_DetailShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentPlanForOrder",
			Handler:    _ManagerService_ListShipmentPlanForOrder_Handler,
		},
		{
			MethodName: "CreateShipmentOrder",
			Handler:    _ManagerService_CreateShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentOrder",
			Handler:    _ManagerService_ListShipmentOrder_Handler,
		},
		{
			MethodName: "CountShipmentOrder",
			Handler:    _ManagerService_CountShipmentOrder_Handler,
		},
		{
			MethodName: "ReceiveShipmentOrder",
			Handler:    _ManagerService_ReceiveShipmentOrder_Handler,
		},
		{
			MethodName: "GetContractByShipmentPlanId",
			Handler:    _ManagerService_GetContractByShipmentPlanId_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ManagerService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ManagerService_UpdateConfig_Handler,
		},
		{
			MethodName: "InsertConfigs",
			Handler:    _ManagerService_InsertConfigs_Handler,
		},
		{
			MethodName: "DeleteConfigs",
			Handler:    _ManagerService_DeleteConfigs_Handler,
		},
		{
			MethodName: "ListCompanyBind",
			Handler:    _ManagerService_ListCompanyBind_Handler,
		},
		{
			MethodName: "CompanyBind",
			Handler:    _ManagerService_CompanyBind_Handler,
		},
		{
			MethodName: "ListMiBind",
			Handler:    _ManagerService_ListMiBind_Handler,
		},
		{
			MethodName: "MiBind",
			Handler:    _ManagerService_MiBind_Handler,
		},
		{
			MethodName: "ListMedicineBind",
			Handler:    _ManagerService_ListMedicineBind_Handler,
		},
		{
			MethodName: "MedicineBind",
			Handler:    _ManagerService_MedicineBind_Handler,
		},
		{
			MethodName: "ListContractsByMiContractIds",
			Handler:    _ManagerService_ListContractsByMiContractIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	//库存数据上报
	StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error)
	//库存列表展示
	StockList(ctx context.Context, in *StockListReq, opts ...grpc.CallOption) (*StockListResp, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error) {
	out := new(StockSyncResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/StockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error) {
	out := new(ComStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error) {
	out := new(ComStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error) {
	out := new(MiStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error) {
	out := new(MiStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) StockList(ctx context.Context, in *StockListReq, opts ...grpc.CallOption) (*StockListResp, error) {
	out := new(StockListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/StockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	//库存数据上报
	StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error)
	//库存列表展示
	StockList(context.Context, *StockListReq) (*StockListResp, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockSync not implemented")
}
func (UnimplementedStockServiceServer) ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBindList not implemented")
}
func (UnimplementedStockServiceServer) ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBind not implemented")
}
func (UnimplementedStockServiceServer) MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBindList not implemented")
}
func (UnimplementedStockServiceServer) MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBind not implemented")
}
func (UnimplementedStockServiceServer) StockList(context.Context, *StockListReq) (*StockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockList not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_StockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/StockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockSync(ctx, req.(*StockSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, req.(*ComStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, req.(*ComStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, req.(*MiStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, req.(*MiStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_StockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/StockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockList(ctx, req.(*StockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockSync",
			Handler:    _StockService_StockSync_Handler,
		},
		{
			MethodName: "ComStockMedicineBindList",
			Handler:    _StockService_ComStockMedicineBindList_Handler,
		},
		{
			MethodName: "ComStockMedicineBind",
			Handler:    _StockService_ComStockMedicineBind_Handler,
		},
		{
			MethodName: "MiStockMedicineBindList",
			Handler:    _StockService_MiStockMedicineBindList_Handler,
		},
		{
			MethodName: "MiStockMedicineBind",
			Handler:    _StockService_MiStockMedicineBind_Handler,
		},
		{
			MethodName: "StockList",
			Handler:    _StockService_StockList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// DataReportServiceClient is the client API for DataReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataReportServiceClient interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error)
	//获取目前的待审核保理金额
	GetCurrentFactoringApply(ctx context.Context, in *GetCurrentFactoringApplyReq, opts ...grpc.CallOption) (*GetCurrentFactoringApplyResp, error)
}

type dataReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataReportServiceClient(cc grpc.ClientConnInterface) DataReportServiceClient {
	return &dataReportServiceClient{cc}
}

func (c *dataReportServiceClient) GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error) {
	out := new(GetShipmentPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error) {
	out := new(GetShipmentPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error) {
	out := new(GetShipmentPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error) {
	out := new(GetShipmentOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error) {
	out := new(GetShipmentOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error) {
	out := new(GetShipmentOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error) {
	out := new(GetFactoringOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error) {
	out := new(GetFactoringOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error) {
	out := new(GetFactoringOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error) {
	out := new(GetContractPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error) {
	out := new(GetContractPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error) {
	out := new(GetContractPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error) {
	out := new(GetContractSumResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error) {
	out := new(GetValidContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetValidContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error) {
	out := new(GetCurrentNeedPayResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetCurrentNeedPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetCurrentFactoringApply(ctx context.Context, in *GetCurrentFactoringApplyReq, opts ...grpc.CallOption) (*GetCurrentFactoringApplyResp, error) {
	out := new(GetCurrentFactoringApplyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetCurrentFactoringApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataReportServiceServer is the server API for DataReportService service.
// All implementations must embed UnimplementedDataReportServiceServer
// for forward compatibility
type DataReportServiceServer interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error)
	//获取目前的待审核保理金额
	GetCurrentFactoringApply(context.Context, *GetCurrentFactoringApplyReq) (*GetCurrentFactoringApplyResp, error)
	mustEmbedUnimplementedDataReportServiceServer()
}

// UnimplementedDataReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataReportServiceServer struct {
}

func (UnimplementedDataReportServiceServer) GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanDayReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanMonthReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanYearReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderDayReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderMonthReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderYearReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderDayReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderMonthReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderYearReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanDayReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanMonthReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanYearReports not implemented")
}
func (UnimplementedDataReportServiceServer) GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractSum not implemented")
}
func (UnimplementedDataReportServiceServer) GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidContractInfo not implemented")
}
func (UnimplementedDataReportServiceServer) GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentNeedPay not implemented")
}
func (UnimplementedDataReportServiceServer) GetCurrentFactoringApply(context.Context, *GetCurrentFactoringApplyReq) (*GetCurrentFactoringApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentFactoringApply not implemented")
}
func (UnimplementedDataReportServiceServer) mustEmbedUnimplementedDataReportServiceServer() {}

// UnsafeDataReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataReportServiceServer will
// result in compilation errors.
type UnsafeDataReportServiceServer interface {
	mustEmbedUnimplementedDataReportServiceServer()
}

func RegisterDataReportServiceServer(s grpc.ServiceRegistrar, srv DataReportServiceServer) {
	s.RegisterService(&_DataReportService_serviceDesc, srv)
}

func _DataReportService_GetShipmentPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractSum(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetValidContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetValidContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, req.(*GetValidContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetCurrentNeedPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentNeedPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetCurrentNeedPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, req.(*GetCurrentNeedPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetCurrentFactoringApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentFactoringApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetCurrentFactoringApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetCurrentFactoringApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetCurrentFactoringApply(ctx, req.(*GetCurrentFactoringApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.DataReportService",
	HandlerType: (*DataReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentPlanDayReports",
			Handler:    _DataReportService_GetShipmentPlanDayReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanMonthReports",
			Handler:    _DataReportService_GetShipmentPlanMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanYearReports",
			Handler:    _DataReportService_GetShipmentPlanYearReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderDayReports",
			Handler:    _DataReportService_GetShipmentOrderDayReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderMonthReports",
			Handler:    _DataReportService_GetShipmentOrderMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderYearReports",
			Handler:    _DataReportService_GetShipmentOrderYearReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderDayReports",
			Handler:    _DataReportService_GetFactoringOrderDayReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderMonthReports",
			Handler:    _DataReportService_GetFactoringOrderMonthReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderYearReports",
			Handler:    _DataReportService_GetFactoringOrderYearReports_Handler,
		},
		{
			MethodName: "GetContractPlanDayReports",
			Handler:    _DataReportService_GetContractPlanDayReports_Handler,
		},
		{
			MethodName: "GetContractPlanMonthReports",
			Handler:    _DataReportService_GetContractPlanMonthReports_Handler,
		},
		{
			MethodName: "GetContractPlanYearReports",
			Handler:    _DataReportService_GetContractPlanYearReports_Handler,
		},
		{
			MethodName: "GetContractSum",
			Handler:    _DataReportService_GetContractSum_Handler,
		},
		{
			MethodName: "GetValidContractInfo",
			Handler:    _DataReportService_GetValidContractInfo_Handler,
		},
		{
			MethodName: "GetCurrentNeedPay",
			Handler:    _DataReportService_GetCurrentNeedPay_Handler,
		},
		{
			MethodName: "GetCurrentFactoringApply",
			Handler:    _DataReportService_GetCurrentFactoringApply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// HashServiceClient is the client API for HashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashServiceClient interface {
	//hash模块
	GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error)
	GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error)
	GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error)
	GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error)
	GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error)
	GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error)
	GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error)
	GetMessageHash(ctx context.Context, in *ListMessageHashReq, opts ...grpc.CallOption) (*ListMessageHashResp, error)
	GetCommonInfoHash(ctx context.Context, in *GetInfoHashReq, opts ...grpc.CallOption) (*GetInfoHashRsp, error)
}

type hashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashServiceClient(cc grpc.ClientConnInterface) HashServiceClient {
	return &hashServiceClient{cc}
}

func (c *hashServiceClient) GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error) {
	out := new(GetCompanyHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetCompanyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error) {
	out := new(GetMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error) {
	out := new(GetMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMedicineHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error) {
	out := new(GetContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error) {
	out := new(GetContractMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error) {
	out := new(GetConfigHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetConfigHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error) {
	out := new(GetShipmentPlanHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error) {
	out := new(GetShipmentOrderHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentOrderHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error) {
	out := new(GetShipmentPayHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPayHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error) {
	out := new(GetShipmentFactoringHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentFactoringHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMessageHash(ctx context.Context, in *ListMessageHashReq, opts ...grpc.CallOption) (*ListMessageHashResp, error) {
	out := new(ListMessageHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMessageHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetCommonInfoHash(ctx context.Context, in *GetInfoHashReq, opts ...grpc.CallOption) (*GetInfoHashRsp, error) {
	out := new(GetInfoHashRsp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetCommonInfoHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashServiceServer is the server API for HashService service.
// All implementations must embed UnimplementedHashServiceServer
// for forward compatibility
type HashServiceServer interface {
	//hash模块
	GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error)
	GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error)
	GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error)
	GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error)
	GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error)
	GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error)
	GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error)
	GetMessageHash(context.Context, *ListMessageHashReq) (*ListMessageHashResp, error)
	GetCommonInfoHash(context.Context, *GetInfoHashReq) (*GetInfoHashRsp, error)
	mustEmbedUnimplementedHashServiceServer()
}

// UnimplementedHashServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashServiceServer struct {
}

func (UnimplementedHashServiceServer) GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyHash not implemented")
}
func (UnimplementedHashServiceServer) GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiHash not implemented")
}
func (UnimplementedHashServiceServer) GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineHash not implemented")
}
func (UnimplementedHashServiceServer) GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractHash not implemented")
}
func (UnimplementedHashServiceServer) GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractMiHash not implemented")
}
func (UnimplementedHashServiceServer) GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigHash not implemented")
}
func (UnimplementedHashServiceServer) GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanHash not implemented")
}
func (UnimplementedHashServiceServer) GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderHash not implemented")
}
func (UnimplementedHashServiceServer) GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPayHash not implemented")
}
func (UnimplementedHashServiceServer) GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentFactoringHash not implemented")
}
func (UnimplementedHashServiceServer) GetMessageHash(context.Context, *ListMessageHashReq) (*ListMessageHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHash not implemented")
}
func (UnimplementedHashServiceServer) GetCommonInfoHash(context.Context, *GetInfoHashReq) (*GetInfoHashRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonInfoHash not implemented")
}
func (UnimplementedHashServiceServer) mustEmbedUnimplementedHashServiceServer() {}

// UnsafeHashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashServiceServer will
// result in compilation errors.
type UnsafeHashServiceServer interface {
	mustEmbedUnimplementedHashServiceServer()
}

func RegisterHashServiceServer(s grpc.ServiceRegistrar, srv HashServiceServer) {
	s.RegisterService(&_HashService_serviceDesc, srv)
}

func _HashService_GetCompanyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetCompanyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetCompanyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetCompanyHash(ctx, req.(*GetCompanyHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMiHash(ctx, req.(*GetMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMedicineHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMedicineHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMedicineHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMedicineHash(ctx, req.(*GetMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractHash(ctx, req.(*GetContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractMiHash(ctx, req.(*GetContractMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetConfigHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetConfigHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetConfigHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetConfigHash(ctx, req.(*GetConfigHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, req.(*GetShipmentPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentOrderHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentOrderHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, req.(*GetShipmentOrderHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPayHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPayHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPayHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, req.(*GetShipmentPayHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentFactoringHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentFactoringHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentFactoringHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, req.(*GetShipmentFactoringHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMessageHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMessageHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMessageHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMessageHash(ctx, req.(*ListMessageHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetCommonInfoHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetCommonInfoHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetCommonInfoHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetCommonInfoHash(ctx, req.(*GetInfoHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.HashService",
	HandlerType: (*HashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyHash",
			Handler:    _HashService_GetCompanyHash_Handler,
		},
		{
			MethodName: "GetMiHash",
			Handler:    _HashService_GetMiHash_Handler,
		},
		{
			MethodName: "GetMedicineHash",
			Handler:    _HashService_GetMedicineHash_Handler,
		},
		{
			MethodName: "GetContractHash",
			Handler:    _HashService_GetContractHash_Handler,
		},
		{
			MethodName: "GetContractMiHash",
			Handler:    _HashService_GetContractMiHash_Handler,
		},
		{
			MethodName: "GetConfigHash",
			Handler:    _HashService_GetConfigHash_Handler,
		},
		{
			MethodName: "GetShipmentPlanHash",
			Handler:    _HashService_GetShipmentPlanHash_Handler,
		},
		{
			MethodName: "GetShipmentOrderHash",
			Handler:    _HashService_GetShipmentOrderHash_Handler,
		},
		{
			MethodName: "GetShipmentPayHash",
			Handler:    _HashService_GetShipmentPayHash_Handler,
		},
		{
			MethodName: "GetShipmentFactoringHash",
			Handler:    _HashService_GetShipmentFactoringHash_Handler,
		},
		{
			MethodName: "GetMessageHash",
			Handler:    _HashService_GetMessageHash_Handler,
		},
		{
			MethodName: "GetCommonInfoHash",
			Handler:    _HashService_GetCommonInfoHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// RankServiceClient is the client API for RankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankServiceClient interface {
	// 医疗机构 带量采购排名前十药品
	GetShipmentMedicineRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentMedicineRankDataYearResp, error)
	// 医疗机构 采购金额排名前十的医药企业
	GetShipmentCompanyRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentCompanyRankDataYearResp, error)
	// 医疗机构 招采单物流信息
	GetShipmentLogisticsList(ctx context.Context, in *GetShipmentLogisticsListReq, opts ...grpc.CallOption) (*GetShipmentLogisticsListResp, error)
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error)
}

type rankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankServiceClient(cc grpc.ClientConnInterface) RankServiceClient {
	return &rankServiceClient{cc}
}

func (c *rankServiceClient) GetShipmentMedicineRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentMedicineRankDataYearResp, error) {
	out := new(ShipmentMedicineRankDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentMedicineRankDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentCompanyRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentCompanyRankDataYearResp, error) {
	out := new(ShipmentCompanyRankDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentCompanyRankDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentLogisticsList(ctx context.Context, in *GetShipmentLogisticsListReq, opts ...grpc.CallOption) (*GetShipmentLogisticsListResp, error) {
	out := new(GetShipmentLogisticsListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentLogisticsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error) {
	out := new(GetShipmentRankMedicineDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankMedicineDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error) {
	out := new(GetShipmentRankCompanyDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankCompanyDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error) {
	out := new(GetRankMiReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error) {
	out := new(GetRankComReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankComReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error) {
	out := new(GetRankMiPaidYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiPaidYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error) {
	out := new(GetRankMedicineYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMedicineYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error) {
	out := new(GetMIBDashboardBaseInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetMIBDashboardBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServiceServer is the server API for RankService service.
// All implementations must embed UnimplementedRankServiceServer
// for forward compatibility
type RankServiceServer interface {
	// 医疗机构 带量采购排名前十药品
	GetShipmentMedicineRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentMedicineRankDataYearResp, error)
	// 医疗机构 采购金额排名前十的医药企业
	GetShipmentCompanyRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentCompanyRankDataYearResp, error)
	// 医疗机构 招采单物流信息
	GetShipmentLogisticsList(context.Context, *GetShipmentLogisticsListReq) (*GetShipmentLogisticsListResp, error)
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error)
	mustEmbedUnimplementedRankServiceServer()
}

// UnimplementedRankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRankServiceServer struct {
}

func (UnimplementedRankServiceServer) GetShipmentMedicineRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentMedicineRankDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentMedicineRankDataYear not implemented")
}
func (UnimplementedRankServiceServer) GetShipmentCompanyRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentCompanyRankDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentCompanyRankDataYear not implemented")
}
func (UnimplementedRankServiceServer) GetShipmentLogisticsList(context.Context, *GetShipmentLogisticsListReq) (*GetShipmentLogisticsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentLogisticsList not implemented")
}
func (UnimplementedRankServiceServer) GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankMedicineDataYear not implemented")
}
func (UnimplementedRankServiceServer) GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankCompanyDataYear not implemented")
}
func (UnimplementedRankServiceServer) GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiReceiveYear not implemented")
}
func (UnimplementedRankServiceServer) GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankComReceiveYear not implemented")
}
func (UnimplementedRankServiceServer) GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiPaidYear not implemented")
}
func (UnimplementedRankServiceServer) GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMedicineYear not implemented")
}
func (UnimplementedRankServiceServer) GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIBDashboardBaseInfo not implemented")
}
func (UnimplementedRankServiceServer) mustEmbedUnimplementedRankServiceServer() {}

// UnsafeRankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankServiceServer will
// result in compilation errors.
type UnsafeRankServiceServer interface {
	mustEmbedUnimplementedRankServiceServer()
}

func RegisterRankServiceServer(s grpc.ServiceRegistrar, srv RankServiceServer) {
	s.RegisterService(&_RankService_serviceDesc, srv)
}

func _RankService_GetShipmentMedicineRankDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentRankDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentMedicineRankDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentMedicineRankDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentMedicineRankDataYear(ctx, req.(*ShipmentRankDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentCompanyRankDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentRankDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentCompanyRankDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentCompanyRankDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentCompanyRankDataYear(ctx, req.(*ShipmentRankDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentLogisticsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentLogisticsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentLogisticsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentLogisticsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentLogisticsList(ctx, req.(*GetShipmentLogisticsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentRankMedicineDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankMedicineDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankMedicineDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, req.(*GetShipmentRankMedicineDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentRankCompanyDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankCompanyDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankCompanyDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, req.(*GetShipmentRankCompanyDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, req.(*GetRankMiReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankComReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankComReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankComReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, req.(*GetRankComReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiPaidYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiPaidYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiPaidYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, req.(*GetRankMiPaidYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMedicineYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMedicineYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMedicineYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, req.(*GetRankMedicineYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetMIBDashboardBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIBDashboardBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetMIBDashboardBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, req.(*GetMIBDashboardBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.RankService",
	HandlerType: (*RankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentMedicineRankDataYear",
			Handler:    _RankService_GetShipmentMedicineRankDataYear_Handler,
		},
		{
			MethodName: "GetShipmentCompanyRankDataYear",
			Handler:    _RankService_GetShipmentCompanyRankDataYear_Handler,
		},
		{
			MethodName: "GetShipmentLogisticsList",
			Handler:    _RankService_GetShipmentLogisticsList_Handler,
		},
		{
			MethodName: "GetShipmentRankMedicineDataYear",
			Handler:    _RankService_GetShipmentRankMedicineDataYear_Handler,
		},
		{
			MethodName: "GetShipmentRankCompanyDataYear",
			Handler:    _RankService_GetShipmentRankCompanyDataYear_Handler,
		},
		{
			MethodName: "GetRankMiReceiveYear",
			Handler:    _RankService_GetRankMiReceiveYear_Handler,
		},
		{
			MethodName: "GetRankComReceiveYear",
			Handler:    _RankService_GetRankComReceiveYear_Handler,
		},
		{
			MethodName: "GetRankMiPaidYear",
			Handler:    _RankService_GetRankMiPaidYear_Handler,
		},
		{
			MethodName: "GetRankMedicineYear",
			Handler:    _RankService_GetRankMedicineYear_Handler,
		},
		{
			MethodName: "GetMIBDashboardBaseInfo",
			Handler:    _RankService_GetMIBDashboardBaseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// ReimbursementSerivceClient is the client API for ReimbursementSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReimbursementSerivceClient interface {
	//报销列表
	List(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListRes, error)
	//保存审批报表
	UpApprovalFile(ctx context.Context, in *ReimbursementUpApprovalFile, opts ...grpc.CallOption) (*StandardRes, error)
	//保存报销报表
	UpApplyFile(ctx context.Context, in *ReimbursementUpApplyFile, opts ...grpc.CallOption) (*StandardRes, error)
	//设置医院端报销金额
	UpApplyAmount(ctx context.Context, in *ReimbursementUpApplyAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//设置审批金额
	UpApprovalAmount(ctx context.Context, in *ReimbursementUpApprovalAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//设置预期报销金额
	UpExpectApplyAmount(ctx context.Context, in *ReimbursementUpExpectApplyAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//审批报销数据
	Approval(ctx context.Context, in *ReimbursementApproval, opts ...grpc.CallOption) (*StandardRes, error)
}

type reimbursementSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewReimbursementSerivceClient(cc grpc.ClientConnInterface) ReimbursementSerivceClient {
	return &reimbursementSerivceClient{cc}
}

func (c *reimbursementSerivceClient) List(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListRes, error) {
	out := new(ReimbursementListRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApprovalFile(ctx context.Context, in *ReimbursementUpApprovalFile, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApprovalFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApplyFile(ctx context.Context, in *ReimbursementUpApplyFile, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApplyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApplyAmount(ctx context.Context, in *ReimbursementUpApplyAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApplyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApprovalAmount(ctx context.Context, in *ReimbursementUpApprovalAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApprovalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpExpectApplyAmount(ctx context.Context, in *ReimbursementUpExpectApplyAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpExpectApplyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) Approval(ctx context.Context, in *ReimbursementApproval, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/Approval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReimbursementSerivceServer is the server API for ReimbursementSerivce service.
// All implementations must embed UnimplementedReimbursementSerivceServer
// for forward compatibility
type ReimbursementSerivceServer interface {
	//报销列表
	List(context.Context, *ReimbursementListReq) (*ReimbursementListRes, error)
	//保存审批报表
	UpApprovalFile(context.Context, *ReimbursementUpApprovalFile) (*StandardRes, error)
	//保存报销报表
	UpApplyFile(context.Context, *ReimbursementUpApplyFile) (*StandardRes, error)
	//设置医院端报销金额
	UpApplyAmount(context.Context, *ReimbursementUpApplyAmount) (*StandardRes, error)
	//设置审批金额
	UpApprovalAmount(context.Context, *ReimbursementUpApprovalAmount) (*StandardRes, error)
	//设置预期报销金额
	UpExpectApplyAmount(context.Context, *ReimbursementUpExpectApplyAmount) (*StandardRes, error)
	//审批报销数据
	Approval(context.Context, *ReimbursementApproval) (*StandardRes, error)
	mustEmbedUnimplementedReimbursementSerivceServer()
}

// UnimplementedReimbursementSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedReimbursementSerivceServer struct {
}

func (UnimplementedReimbursementSerivceServer) List(context.Context, *ReimbursementListReq) (*ReimbursementListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReimbursementSerivceServer) UpApprovalFile(context.Context, *ReimbursementUpApprovalFile) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApprovalFile not implemented")
}
func (UnimplementedReimbursementSerivceServer) UpApplyFile(context.Context, *ReimbursementUpApplyFile) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApplyFile not implemented")
}
func (UnimplementedReimbursementSerivceServer) UpApplyAmount(context.Context, *ReimbursementUpApplyAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApplyAmount not implemented")
}
func (UnimplementedReimbursementSerivceServer) UpApprovalAmount(context.Context, *ReimbursementUpApprovalAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApprovalAmount not implemented")
}
func (UnimplementedReimbursementSerivceServer) UpExpectApplyAmount(context.Context, *ReimbursementUpExpectApplyAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpExpectApplyAmount not implemented")
}
func (UnimplementedReimbursementSerivceServer) Approval(context.Context, *ReimbursementApproval) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approval not implemented")
}
func (UnimplementedReimbursementSerivceServer) mustEmbedUnimplementedReimbursementSerivceServer() {}

// UnsafeReimbursementSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReimbursementSerivceServer will
// result in compilation errors.
type UnsafeReimbursementSerivceServer interface {
	mustEmbedUnimplementedReimbursementSerivceServer()
}

func RegisterReimbursementSerivceServer(s grpc.ServiceRegistrar, srv ReimbursementSerivceServer) {
	s.RegisterService(&_ReimbursementSerivce_serviceDesc, srv)
}

func _ReimbursementSerivce_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).List(ctx, req.(*ReimbursementListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApprovalFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApprovalFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApprovalFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApprovalFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApprovalFile(ctx, req.(*ReimbursementUpApprovalFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApplyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApplyFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApplyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApplyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApplyFile(ctx, req.(*ReimbursementUpApplyFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApplyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApplyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApplyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApplyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApplyAmount(ctx, req.(*ReimbursementUpApplyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApprovalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApprovalAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApprovalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApprovalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApprovalAmount(ctx, req.(*ReimbursementUpApprovalAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpExpectApplyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpExpectApplyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpExpectApplyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpExpectApplyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpExpectApplyAmount(ctx, req.(*ReimbursementUpExpectApplyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_Approval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).Approval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/Approval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).Approval(ctx, req.(*ReimbursementApproval))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReimbursementSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ReimbursementSerivce",
	HandlerType: (*ReimbursementSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReimbursementSerivce_List_Handler,
		},
		{
			MethodName: "UpApprovalFile",
			Handler:    _ReimbursementSerivce_UpApprovalFile_Handler,
		},
		{
			MethodName: "UpApplyFile",
			Handler:    _ReimbursementSerivce_UpApplyFile_Handler,
		},
		{
			MethodName: "UpApplyAmount",
			Handler:    _ReimbursementSerivce_UpApplyAmount_Handler,
		},
		{
			MethodName: "UpApprovalAmount",
			Handler:    _ReimbursementSerivce_UpApprovalAmount_Handler,
		},
		{
			MethodName: "UpExpectApplyAmount",
			Handler:    _ReimbursementSerivce_UpExpectApplyAmount_Handler,
		},
		{
			MethodName: "Approval",
			Handler:    _ReimbursementSerivce_Approval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// MicroToolsServiceClient is the client API for MicroToolsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroToolsServiceClient interface {
	// 获取 workDay
	GetNextWorkDay(ctx context.Context, in *GetNextWorkDayReq, opts ...grpc.CallOption) (*GetNextWorkDayRsp, error)
}

type microToolsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroToolsServiceClient(cc grpc.ClientConnInterface) MicroToolsServiceClient {
	return &microToolsServiceClient{cc}
}

func (c *microToolsServiceClient) GetNextWorkDay(ctx context.Context, in *GetNextWorkDayReq, opts ...grpc.CallOption) (*GetNextWorkDayRsp, error) {
	out := new(GetNextWorkDayRsp)
	err := c.cc.Invoke(ctx, "/ManagerService.MicroToolsService/GetNextWorkDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroToolsServiceServer is the server API for MicroToolsService service.
// All implementations must embed UnimplementedMicroToolsServiceServer
// for forward compatibility
type MicroToolsServiceServer interface {
	// 获取 workDay
	GetNextWorkDay(context.Context, *GetNextWorkDayReq) (*GetNextWorkDayRsp, error)
	mustEmbedUnimplementedMicroToolsServiceServer()
}

// UnimplementedMicroToolsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroToolsServiceServer struct {
}

func (UnimplementedMicroToolsServiceServer) GetNextWorkDay(context.Context, *GetNextWorkDayReq) (*GetNextWorkDayRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextWorkDay not implemented")
}
func (UnimplementedMicroToolsServiceServer) mustEmbedUnimplementedMicroToolsServiceServer() {}

// UnsafeMicroToolsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroToolsServiceServer will
// result in compilation errors.
type UnsafeMicroToolsServiceServer interface {
	mustEmbedUnimplementedMicroToolsServiceServer()
}

func RegisterMicroToolsServiceServer(s grpc.ServiceRegistrar, srv MicroToolsServiceServer) {
	s.RegisterService(&_MicroToolsService_serviceDesc, srv)
}

func _MicroToolsService_GetNextWorkDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextWorkDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroToolsServiceServer).GetNextWorkDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.MicroToolsService/GetNextWorkDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroToolsServiceServer).GetNextWorkDay(ctx, req.(*GetNextWorkDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroToolsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.MicroToolsService",
	HandlerType: (*MicroToolsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextWorkDay",
			Handler:    _MicroToolsService_GetNextWorkDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}
