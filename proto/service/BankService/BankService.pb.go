// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: BankService.proto

package BankService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int64 `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber"`
	PageSize   int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{0}
}

func (x *Page) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

//查询银行账号通用接口
type ListBankAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId int64 `protobuf:"varint,1,opt,name=organizationId,proto3" json:"organizationId"`
	//
	AccountType string `protobuf:"bytes,2,opt,name=accountType,proto3" json:"accountType"`
	ManagerId   int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪些账户
	BankAccountIds []int64 `protobuf:"varint,4,rep,packed,name=bankAccountIds,proto3" json:"bankAccountIds"`
}

func (x *ListBankAccountReq) Reset() {
	*x = ListBankAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBankAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBankAccountReq) ProtoMessage() {}

func (x *ListBankAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBankAccountReq.ProtoReflect.Descriptor instead.
func (*ListBankAccountReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{1}
}

func (x *ListBankAccountReq) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListBankAccountReq) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *ListBankAccountReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListBankAccountReq) GetBankAccountIds() []int64 {
	if x != nil {
		return x.BankAccountIds
	}
	return nil
}

type ListBankAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListBankAccountVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListBankAccountResp) Reset() {
	*x = ListBankAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBankAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBankAccountResp) ProtoMessage() {}

func (x *ListBankAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBankAccountResp.ProtoReflect.Descriptor instead.
func (*ListBankAccountResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{2}
}

func (x *ListBankAccountResp) GetList() []*ListBankAccountVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListBankAccountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBankAccountResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBankAccountResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListBankAccountVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId int64                  `protobuf:"varint,1,opt,name=organizationId,proto3" json:"organizationId"`
	CardNo         string                 `protobuf:"bytes,2,opt,name=cardNo,proto3" json:"cardNo"`
	AccountType    string                 `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType"`
	Bank           string                 `protobuf:"bytes,4,opt,name=bank,proto3" json:"bank"`
	CardOwner      string                 `protobuf:"bytes,5,opt,name=cardOwner,proto3" json:"cardOwner"`
	Toibkn         string                 `protobuf:"bytes,6,opt,name=toibkn,proto3" json:"toibkn"`
	FrozenAmount   int64                  `protobuf:"varint,7,opt,name=frozenAmount,proto3" json:"frozenAmount"`
	CardStatus     string                 `protobuf:"bytes,8,opt,name=cardStatus,proto3" json:"cardStatus"`
	ValidStatus    string                 `protobuf:"bytes,9,opt,name=validStatus,proto3" json:"validStatus"`
	BankAccountId  int64                  `protobuf:"varint,10,opt,name=bankAccountId,proto3" json:"bankAccountId"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *ListBankAccountVo) Reset() {
	*x = ListBankAccountVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBankAccountVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBankAccountVo) ProtoMessage() {}

func (x *ListBankAccountVo) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBankAccountVo.ProtoReflect.Descriptor instead.
func (*ListBankAccountVo) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{3}
}

func (x *ListBankAccountVo) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ListBankAccountVo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *ListBankAccountVo) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *ListBankAccountVo) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *ListBankAccountVo) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *ListBankAccountVo) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *ListBankAccountVo) GetFrozenAmount() int64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *ListBankAccountVo) GetCardStatus() string {
	if x != nil {
		return x.CardStatus
	}
	return ""
}

func (x *ListBankAccountVo) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *ListBankAccountVo) GetBankAccountId() int64 {
	if x != nil {
		return x.BankAccountId
	}
	return 0
}

func (x *ListBankAccountVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//创建银行账号部分
type CreateOneAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*AccountInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64          `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneAccountInfoReq) Reset() {
	*x = CreateOneAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneAccountInfoReq) ProtoMessage() {}

func (x *CreateOneAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneAccountInfoReq.ProtoReflect.Descriptor instead.
func (*CreateOneAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOneAccountInfoReq) GetList() []*AccountInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CreateOneAccountInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MibId             int64  `protobuf:"varint,1,opt,name=mibId,proto3" json:"mibId"`
	CardNo            string `protobuf:"bytes,2,opt,name=cardNo,proto3" json:"cardNo"`
	AccountType       string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType"`
	Bank              string `protobuf:"bytes,4,opt,name=bank,proto3" json:"bank"`
	OrganizationId    int64  `protobuf:"varint,5,opt,name=organizationId,proto3" json:"organizationId"`
	Toibkn            string `protobuf:"bytes,6,opt,name=toibkn,proto3" json:"toibkn"`
	CardOwner         string `protobuf:"bytes,7,opt,name=cardOwner,proto3" json:"cardOwner"`
	FrozenAmount      int64  `protobuf:"varint,8,opt,name=frozenAmount,proto3" json:"frozenAmount"`
	CardStatus        string `protobuf:"bytes,9,opt,name=cardStatus,proto3" json:"cardStatus"`
	BankAccountInfoId int64  `protobuf:"varint,10,opt,name=bankAccountInfoId,proto3" json:"bankAccountInfoId"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{5}
}

func (x *AccountInfo) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *AccountInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *AccountInfo) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *AccountInfo) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *AccountInfo) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *AccountInfo) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *AccountInfo) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *AccountInfo) GetFrozenAmount() int64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *AccountInfo) GetCardStatus() string {
	if x != nil {
		return x.CardStatus
	}
	return ""
}

func (x *AccountInfo) GetBankAccountInfoId() int64 {
	if x != nil {
		return x.BankAccountInfoId
	}
	return 0
}

type CreateOneAccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneAccountInfoResp) Reset() {
	*x = CreateOneAccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneAccountInfoResp) ProtoMessage() {}

func (x *CreateOneAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneAccountInfoResp.ProtoReflect.Descriptor instead.
func (*CreateOneAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOneAccountInfoResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新帐号信息
type UpdateBankAccountListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*AccountInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64          `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateBankAccountListReq) Reset() {
	*x = UpdateBankAccountListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankAccountListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankAccountListReq) ProtoMessage() {}

func (x *UpdateBankAccountListReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankAccountListReq.ProtoReflect.Descriptor instead.
func (*UpdateBankAccountListReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateBankAccountListReq) GetList() []*AccountInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UpdateBankAccountListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateBankAccountListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateBankAccountListResp) Reset() {
	*x = UpdateBankAccountListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankAccountListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankAccountListResp) ProtoMessage() {}

func (x *UpdateBankAccountListResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankAccountListResp.ProtoReflect.Descriptor instead.
func (*UpdateBankAccountListResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBankAccountListResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//账号有效性操作
type UpdateBankAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNo         string `protobuf:"bytes,1,opt,name=cardNo,proto3" json:"cardNo"`
	ValidStatus    string `protobuf:"bytes,2,opt,name=validStatus,proto3" json:"validStatus"`
	ManagerId      int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	AccountType    string `protobuf:"bytes,4,opt,name=accountType,proto3" json:"accountType"`
	OldValidStatus string `protobuf:"bytes,5,opt,name=oldValidStatus,proto3" json:"oldValidStatus"`
	OrgId          int64  `protobuf:"varint,6,opt,name=orgId,proto3" json:"orgId"`
	OrgCode        string `protobuf:"bytes,7,opt,name=orgCode,proto3" json:"orgCode"`
}

func (x *UpdateBankAccountReq) Reset() {
	*x = UpdateBankAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankAccountReq) ProtoMessage() {}

func (x *UpdateBankAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankAccountReq.ProtoReflect.Descriptor instead.
func (*UpdateBankAccountReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBankAccountReq) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *UpdateBankAccountReq) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *UpdateBankAccountReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateBankAccountReq) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *UpdateBankAccountReq) GetOldValidStatus() string {
	if x != nil {
		return x.OldValidStatus
	}
	return ""
}

func (x *UpdateBankAccountReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *UpdateBankAccountReq) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

type UpdateBankAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateBankAccountResp) Reset() {
	*x = UpdateBankAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankAccountResp) ProtoMessage() {}

func (x *UpdateBankAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankAccountResp.ProtoReflect.Descriptor instead.
func (*UpdateBankAccountResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBankAccountResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetCompanyCreditConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page        *Page  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	CompanyCode string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName string `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName"`
}

func (x *GetCompanyCreditConfigsReq) Reset() {
	*x = GetCompanyCreditConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyCreditConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyCreditConfigsReq) ProtoMessage() {}

func (x *GetCompanyCreditConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyCreditConfigsReq.ProtoReflect.Descriptor instead.
func (*GetCompanyCreditConfigsReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{11}
}

func (x *GetCompanyCreditConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCompanyCreditConfigsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetCompanyCreditConfigsReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *GetCompanyCreditConfigsReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetCurrentCompanyCreditConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyCode string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
}

func (x *GetCurrentCompanyCreditConfigsReq) Reset() {
	*x = GetCurrentCompanyCreditConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentCompanyCreditConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentCompanyCreditConfigsReq) ProtoMessage() {}

func (x *GetCurrentCompanyCreditConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentCompanyCreditConfigsReq.ProtoReflect.Descriptor instead.
func (*GetCurrentCompanyCreditConfigsReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{12}
}

func (x *GetCurrentCompanyCreditConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCurrentCompanyCreditConfigsReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

type CompanyCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId       int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName     string                 `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode     string                 `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	CreditUsed      int64                  `protobuf:"varint,4,opt,name=creditUsed,proto3" json:"creditUsed"`
	CreditAmount    int64                  `protobuf:"varint,5,opt,name=creditAmount,proto3" json:"creditAmount"`
	CreditType      string                 `protobuf:"bytes,6,opt,name=creditType,proto3" json:"creditType"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	UpdaterId       int64                  `protobuf:"varint,9,opt,name=updaterId,proto3" json:"updaterId"`
	UpdaterUserName string                 `protobuf:"bytes,10,opt,name=updaterUserName,proto3" json:"updaterUserName"`
	ManagerName     string                 `protobuf:"bytes,11,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone    string                 `protobuf:"bytes,12,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province        string                 `protobuf:"bytes,13,opt,name=province,proto3" json:"province"`
	City            string                 `protobuf:"bytes,14,opt,name=city,proto3" json:"city"`
	Zone            string                 `protobuf:"bytes,15,opt,name=zone,proto3" json:"zone"`
	ConfigId        int64                  `protobuf:"varint,16,opt,name=configId,proto3" json:"configId"`
	CreditRate      string                 `protobuf:"bytes,17,opt,name=creditRate,proto3" json:"creditRate"`
}

func (x *CompanyCredit) Reset() {
	*x = CompanyCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyCredit) ProtoMessage() {}

func (x *CompanyCredit) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyCredit.ProtoReflect.Descriptor instead.
func (*CompanyCredit) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{13}
}

func (x *CompanyCredit) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyCredit) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyCredit) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyCredit) GetCreditUsed() int64 {
	if x != nil {
		return x.CreditUsed
	}
	return 0
}

func (x *CompanyCredit) GetCreditAmount() int64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *CompanyCredit) GetCreditType() string {
	if x != nil {
		return x.CreditType
	}
	return ""
}

func (x *CompanyCredit) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CompanyCredit) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CompanyCredit) GetUpdaterId() int64 {
	if x != nil {
		return x.UpdaterId
	}
	return 0
}

func (x *CompanyCredit) GetUpdaterUserName() string {
	if x != nil {
		return x.UpdaterUserName
	}
	return ""
}

func (x *CompanyCredit) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CompanyCredit) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CompanyCredit) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CompanyCredit) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyCredit) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CompanyCredit) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CompanyCredit) GetCreditRate() string {
	if x != nil {
		return x.CreditRate
	}
	return ""
}

type GetCompanyCreditConfigsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CompanyCredit `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetCompanyCreditConfigsResp) Reset() {
	*x = GetCompanyCreditConfigsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyCreditConfigsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyCreditConfigsResp) ProtoMessage() {}

func (x *GetCompanyCreditConfigsResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyCreditConfigsResp.ProtoReflect.Descriptor instead.
func (*GetCompanyCreditConfigsResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{14}
}

func (x *GetCompanyCreditConfigsResp) GetList() []*CompanyCredit {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCompanyCreditConfigsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCompanyCreditConfigsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCompanyCreditConfigsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type UpdateCompanyCreditConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyCode  string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	CreditAmount int64                  `protobuf:"varint,3,opt,name=creditAmount,proto3" json:"creditAmount"`
	CreditType   string                 `protobuf:"bytes,4,opt,name=creditType,proto3" json:"creditType"`
	StartAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=startAt,proto3" json:"startAt"`
	EndAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=endAt,proto3" json:"endAt"`
	CreditRate   string                 `protobuf:"bytes,7,opt,name=creditRate,proto3" json:"creditRate"`
}

func (x *UpdateCompanyCreditConfigReq) Reset() {
	*x = UpdateCompanyCreditConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompanyCreditConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyCreditConfigReq) ProtoMessage() {}

func (x *UpdateCompanyCreditConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyCreditConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateCompanyCreditConfigReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateCompanyCreditConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateCompanyCreditConfigReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UpdateCompanyCreditConfigReq) GetCreditAmount() int64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *UpdateCompanyCreditConfigReq) GetCreditType() string {
	if x != nil {
		return x.CreditType
	}
	return ""
}

func (x *UpdateCompanyCreditConfigReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateCompanyCreditConfigReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateCompanyCreditConfigReq) GetCreditRate() string {
	if x != nil {
		return x.CreditRate
	}
	return ""
}

type UpdateCompanyCreditConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCompanyCreditConfigResp) Reset() {
	*x = UpdateCompanyCreditConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompanyCreditConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyCreditConfigResp) ProtoMessage() {}

func (x *UpdateCompanyCreditConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyCreditConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateCompanyCreditConfigResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{16}
}

type GetCompanyBankAccountDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyId   int64  `protobuf:"varint,2,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
}

func (x *GetCompanyBankAccountDetailReq) Reset() {
	*x = GetCompanyBankAccountDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyBankAccountDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyBankAccountDetailReq) ProtoMessage() {}

func (x *GetCompanyBankAccountDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyBankAccountDetailReq.ProtoReflect.Descriptor instead.
func (*GetCompanyBankAccountDetailReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{17}
}

func (x *GetCompanyBankAccountDetailReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCompanyBankAccountDetailReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *GetCompanyBankAccountDetailReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

type GetCompanyBankAccountDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComId        int64                  `protobuf:"varint,1,opt,name=comId,proto3" json:"comId"`
	ComName      string                 `protobuf:"bytes,2,opt,name=comName,proto3" json:"comName"`
	CardNo       string                 `protobuf:"bytes,3,opt,name=cardNo,proto3" json:"cardNo"`
	Bank         string                 `protobuf:"bytes,4,opt,name=bank,proto3" json:"bank"`
	Toibkn       string                 `protobuf:"bytes,5,opt,name=toibkn,proto3" json:"toibkn"`
	CardOwner    string                 `protobuf:"bytes,6,opt,name=cardOwner,proto3" json:"cardOwner"`
	ValidStatus  string                 `protobuf:"bytes,7,opt,name=validStatus,proto3" json:"validStatus"`
	FrozenAmount int64                  `protobuf:"varint,8,opt,name=frozenAmount,proto3" json:"frozenAmount"`
	Bokbal       int64                  `protobuf:"varint,9,opt,name=bokbal,proto3" json:"bokbal"`
	Avabal       int64                  `protobuf:"varint,10,opt,name=avabal,proto3" json:"avabal"`
	Ovramt       int64                  `protobuf:"varint,11,opt,name=ovramt,proto3" json:"ovramt"`
	Stpamt       int64                  `protobuf:"varint,12,opt,name=stpamt,proto3" json:"stpamt"`
	CreateAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createAt,proto3" json:"createAt"`
}

func (x *GetCompanyBankAccountDetailResp) Reset() {
	*x = GetCompanyBankAccountDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyBankAccountDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyBankAccountDetailResp) ProtoMessage() {}

func (x *GetCompanyBankAccountDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyBankAccountDetailResp.ProtoReflect.Descriptor instead.
func (*GetCompanyBankAccountDetailResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{18}
}

func (x *GetCompanyBankAccountDetailResp) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *GetCompanyBankAccountDetailResp) GetFrozenAmount() int64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetBokbal() int64 {
	if x != nil {
		return x.Bokbal
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetAvabal() int64 {
	if x != nil {
		return x.Avabal
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetOvramt() int64 {
	if x != nil {
		return x.Ovramt
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetStpamt() int64 {
	if x != nil {
		return x.Stpamt
	}
	return 0
}

func (x *GetCompanyBankAccountDetailResp) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type CompanyWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId     int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyId     int64  `protobuf:"varint,2,opt,name=companyId,proto3" json:"companyId"`
	ToAcc         string `protobuf:"bytes,3,opt,name=toAcc,proto3" json:"toAcc"`
	ToAccName     string `protobuf:"bytes,4,opt,name=toAccName,proto3" json:"toAccName"`
	Tobknm        string `protobuf:"bytes,5,opt,name=tobknm,proto3" json:"tobknm"`
	Toibkn        string `protobuf:"bytes,6,opt,name=toibkn,proto3" json:"toibkn"`
	Furinfo       string `protobuf:"bytes,7,opt,name=furinfo,proto3" json:"furinfo"`
	WithdrawMoney int64  `protobuf:"varint,8,opt,name=withdrawMoney,proto3" json:"withdrawMoney"`
}

func (x *CompanyWithdrawReq) Reset() {
	*x = CompanyWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyWithdrawReq) ProtoMessage() {}

func (x *CompanyWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyWithdrawReq.ProtoReflect.Descriptor instead.
func (*CompanyWithdrawReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{19}
}

func (x *CompanyWithdrawReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CompanyWithdrawReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyWithdrawReq) GetToAcc() string {
	if x != nil {
		return x.ToAcc
	}
	return ""
}

func (x *CompanyWithdrawReq) GetToAccName() string {
	if x != nil {
		return x.ToAccName
	}
	return ""
}

func (x *CompanyWithdrawReq) GetTobknm() string {
	if x != nil {
		return x.Tobknm
	}
	return ""
}

func (x *CompanyWithdrawReq) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *CompanyWithdrawReq) GetFurinfo() string {
	if x != nil {
		return x.Furinfo
	}
	return ""
}

func (x *CompanyWithdrawReq) GetWithdrawMoney() int64 {
	if x != nil {
		return x.WithdrawMoney
	}
	return 0
}

type ReimbursementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId     int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MibId         int64  `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	Year          int64  `protobuf:"varint,3,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,4,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	InsuranceType string `protobuf:"bytes,6,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementReq) Reset() {
	*x = ReimbursementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementReq) ProtoMessage() {}

func (x *ReimbursementReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementReq.ProtoReflect.Descriptor instead.
func (*ReimbursementReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{20}
}

func (x *ReimbursementReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ReimbursementReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementReq) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type ReimbursementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReimbursementResp) Reset() {
	*x = ReimbursementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementResp) ProtoMessage() {}

func (x *ReimbursementResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementResp.ProtoReflect.Descriptor instead.
func (*ReimbursementResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{21}
}

type CompanyWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompanyWithdrawResp) Reset() {
	*x = CompanyWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyWithdrawResp) ProtoMessage() {}

func (x *CompanyWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyWithdrawResp.ProtoReflect.Descriptor instead.
func (*CompanyWithdrawResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{22}
}

type ListCompanyWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page        *Page                  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	AccountType string                 `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType"`
	ComIds      []int64                `protobuf:"varint,4,rep,packed,name=comIds,proto3" json:"comIds"`
	PayStartAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=payStartAt,proto3" json:"payStartAt"`
	PayEndAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=payEndAt,proto3" json:"payEndAt"`
}

func (x *ListCompanyWithdrawReq) Reset() {
	*x = ListCompanyWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyWithdrawReq) ProtoMessage() {}

func (x *ListCompanyWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyWithdrawReq.ProtoReflect.Descriptor instead.
func (*ListCompanyWithdrawReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{23}
}

func (x *ListCompanyWithdrawReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListCompanyWithdrawReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListCompanyWithdrawReq) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *ListCompanyWithdrawReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListCompanyWithdrawReq) GetPayStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayStartAt
	}
	return nil
}

func (x *ListCompanyWithdrawReq) GetPayEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayEndAt
	}
	return nil
}

type CompanyWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo    string                 `protobuf:"bytes,1,opt,name=outTradeNo,proto3" json:"outTradeNo"`
	WithdrawMoney int64                  `protobuf:"varint,2,opt,name=withdrawMoney,proto3" json:"withdrawMoney"`
	ToAcc         string                 `protobuf:"bytes,3,opt,name=toAcc,proto3" json:"toAcc"`
	ToAccName     string                 `protobuf:"bytes,4,opt,name=toAccName,proto3" json:"toAccName"`
	Tobknm        string                 `protobuf:"bytes,5,opt,name=tobknm,proto3" json:"tobknm"`
	Toibkn        string                 `protobuf:"bytes,6,opt,name=toibkn,proto3" json:"toibkn"`
	Furinfo       string                 `protobuf:"bytes,7,opt,name=furinfo,proto3" json:"furinfo"`
	PayAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payAt,proto3" json:"payAt"`
	PayType       string                 `protobuf:"bytes,9,opt,name=payType,proto3" json:"payType"`
	PayStatus     string                 `protobuf:"bytes,10,opt,name=payStatus,proto3" json:"payStatus"`
	ErrMsg        string                 `protobuf:"bytes,11,opt,name=errMsg,proto3" json:"errMsg"`
	ReceiptUrl    string                 `protobuf:"bytes,12,opt,name=receiptUrl,proto3" json:"receiptUrl"`
	CreateAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createAt,proto3" json:"createAt"`
	UserName      string                 `protobuf:"bytes,14,opt,name=userName,proto3" json:"userName"`
}

func (x *CompanyWithdraw) Reset() {
	*x = CompanyWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyWithdraw) ProtoMessage() {}

func (x *CompanyWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyWithdraw.ProtoReflect.Descriptor instead.
func (*CompanyWithdraw) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{24}
}

func (x *CompanyWithdraw) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *CompanyWithdraw) GetWithdrawMoney() int64 {
	if x != nil {
		return x.WithdrawMoney
	}
	return 0
}

func (x *CompanyWithdraw) GetToAcc() string {
	if x != nil {
		return x.ToAcc
	}
	return ""
}

func (x *CompanyWithdraw) GetToAccName() string {
	if x != nil {
		return x.ToAccName
	}
	return ""
}

func (x *CompanyWithdraw) GetTobknm() string {
	if x != nil {
		return x.Tobknm
	}
	return ""
}

func (x *CompanyWithdraw) GetToibkn() string {
	if x != nil {
		return x.Toibkn
	}
	return ""
}

func (x *CompanyWithdraw) GetFurinfo() string {
	if x != nil {
		return x.Furinfo
	}
	return ""
}

func (x *CompanyWithdraw) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *CompanyWithdraw) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *CompanyWithdraw) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *CompanyWithdraw) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *CompanyWithdraw) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *CompanyWithdraw) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *CompanyWithdraw) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type ListCompanyWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CompanyWithdraw `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListCompanyWithdrawResp) Reset() {
	*x = ListCompanyWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyWithdrawResp) ProtoMessage() {}

func (x *ListCompanyWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyWithdrawResp.ProtoReflect.Descriptor instead.
func (*ListCompanyWithdrawResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{25}
}

func (x *ListCompanyWithdrawResp) GetList() []*CompanyWithdraw {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCompanyWithdrawResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCompanyWithdrawResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCompanyWithdrawResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListPayOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId          int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page               *Page                  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	InvoiceNo          string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode        string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentNo         string                 `protobuf:"bytes,5,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	PayStatus          []string               `protobuf:"bytes,6,rep,name=payStatus,proto3" json:"payStatus"`
	PayType            []string               `protobuf:"bytes,7,rep,name=payType,proto3" json:"payType"`
	MiName             string                 `protobuf:"bytes,8,opt,name=miName,proto3" json:"miName"`
	ComName            string                 `protobuf:"bytes,9,opt,name=comName,proto3" json:"comName"`
	ComCode            string                 `protobuf:"bytes,10,opt,name=comCode,proto3" json:"comCode"`
	PayDeadlineStartAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=payDeadlineStartAt,proto3" json:"payDeadlineStartAt"`
	PayDeadlineEndAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=payDeadlineEndAt,proto3" json:"payDeadlineEndAt"`
	ReceiveStartAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=receiveStartAt,proto3" json:"receiveStartAt"`
	ReceiveEndAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=receiveEndAt,proto3" json:"receiveEndAt"`
	ComIds             []int64                `protobuf:"varint,15,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds              []int64                `protobuf:"varint,16,rep,packed,name=miIds,proto3" json:"miIds"`
	FactoringStatus    string                 `protobuf:"bytes,17,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundStatus       string                 `protobuf:"bytes,18,opt,name=refundStatus,proto3" json:"refundStatus"`
}

func (x *ListPayOrderReq) Reset() {
	*x = ListPayOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayOrderReq) ProtoMessage() {}

func (x *ListPayOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayOrderReq.ProtoReflect.Descriptor instead.
func (*ListPayOrderReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{26}
}

func (x *ListPayOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListPayOrderReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListPayOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListPayOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListPayOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListPayOrderReq) GetPayStatus() []string {
	if x != nil {
		return x.PayStatus
	}
	return nil
}

func (x *ListPayOrderReq) GetPayType() []string {
	if x != nil {
		return x.PayType
	}
	return nil
}

func (x *ListPayOrderReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListPayOrderReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ListPayOrderReq) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *ListPayOrderReq) GetPayDeadlineStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadlineStartAt
	}
	return nil
}

func (x *ListPayOrderReq) GetPayDeadlineEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadlineEndAt
	}
	return nil
}

func (x *ListPayOrderReq) GetReceiveStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveStartAt
	}
	return nil
}

func (x *ListPayOrderReq) GetReceiveEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveEndAt
	}
	return nil
}

func (x *ListPayOrderReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListPayOrderReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ListPayOrderReq) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *ListPayOrderReq) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

type PayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId     int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo          string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo           string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode         string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode        string                 `protobuf:"bytes,5,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentOrderAmount int64                  `protobuf:"varint,6,opt,name=shipmentOrderAmount,proto3" json:"shipmentOrderAmount"`
	ErrMsg              string                 `protobuf:"bytes,7,opt,name=errMsg,proto3" json:"errMsg"`
	PayAt               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payAt,proto3" json:"payAt"`
	PayType             string                 `protobuf:"bytes,9,opt,name=payType,proto3" json:"payType"`
	PayStatus           string                 `protobuf:"bytes,10,opt,name=payStatus,proto3" json:"payStatus"`
	ReceiveAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=receiveAt,proto3" json:"receiveAt"`
	ReceiptUrl          string                 `protobuf:"bytes,12,opt,name=receiptUrl,proto3" json:"receiptUrl"`
	PayDeadline         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=payDeadline,proto3" json:"payDeadline"`
	MiName              string                 `protobuf:"bytes,14,opt,name=miName,proto3" json:"miName"`
	MiId                int64                  `protobuf:"varint,15,opt,name=miId,proto3" json:"miId"`
	MiCode              string                 `protobuf:"bytes,16,opt,name=miCode,proto3" json:"miCode"`
	ComName             string                 `protobuf:"bytes,17,opt,name=comName,proto3" json:"comName"`
	ComId               int64                  `protobuf:"varint,18,opt,name=comId,proto3" json:"comId"`
	ComCode             string                 `protobuf:"bytes,19,opt,name=comCode,proto3" json:"comCode"`
	FactoringStatus     string                 `protobuf:"bytes,20,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundStatus        string                 `protobuf:"bytes,21,opt,name=refundStatus,proto3" json:"refundStatus"`
	FactoringOrderNo    string                 `protobuf:"bytes,22,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	InvoiceUrl          string                 `protobuf:"bytes,23,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	ShipmentPayOrderId  int64                  `protobuf:"varint,24,opt,name=shipmentPayOrderId,proto3" json:"shipmentPayOrderId"`
}

func (x *PayOrder) Reset() {
	*x = PayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrder) ProtoMessage() {}

func (x *PayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrder.ProtoReflect.Descriptor instead.
func (*PayOrder) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{27}
}

func (x *PayOrder) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *PayOrder) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *PayOrder) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *PayOrder) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *PayOrder) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *PayOrder) GetShipmentOrderAmount() int64 {
	if x != nil {
		return x.ShipmentOrderAmount
	}
	return 0
}

func (x *PayOrder) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *PayOrder) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *PayOrder) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *PayOrder) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *PayOrder) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *PayOrder) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *PayOrder) GetPayDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadline
	}
	return nil
}

func (x *PayOrder) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *PayOrder) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *PayOrder) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *PayOrder) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *PayOrder) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *PayOrder) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *PayOrder) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *PayOrder) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *PayOrder) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *PayOrder) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *PayOrder) GetShipmentPayOrderId() int64 {
	if x != nil {
		return x.ShipmentPayOrderId
	}
	return 0
}

type ListPayOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*PayOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListPayOrderResp) Reset() {
	*x = ListPayOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayOrderResp) ProtoMessage() {}

func (x *ListPayOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayOrderResp.ProtoReflect.Descriptor instead.
func (*ListPayOrderResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{28}
}

func (x *ListPayOrderResp) GetList() []*PayOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListPayOrderResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPayOrderResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPayOrderResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListPayOrderPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page        *Page    `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	ShipmentNos []string `protobuf:"bytes,3,rep,name=shipmentNos,proto3" json:"shipmentNos"`
	ComIds      []int64  `protobuf:"varint,4,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds       []int64  `protobuf:"varint,5,rep,packed,name=miIds,proto3" json:"miIds"`
}

func (x *ListPayOrderPlanReq) Reset() {
	*x = ListPayOrderPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayOrderPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayOrderPlanReq) ProtoMessage() {}

func (x *ListPayOrderPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayOrderPlanReq.ProtoReflect.Descriptor instead.
func (*ListPayOrderPlanReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{29}
}

func (x *ListPayOrderPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListPayOrderPlanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListPayOrderPlanReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

func (x *ListPayOrderPlanReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListPayOrderPlanReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

type PayOrderPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo             string                 `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	OrderNo               string                 `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo"`
	TpCode                string                 `protobuf:"bytes,3,opt,name=tpCode,proto3" json:"tpCode"`
	ShipmentAmount        int64                  `protobuf:"varint,4,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount           int64                  `protobuf:"varint,5,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentOrderId       int64                  `protobuf:"varint,6,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo            string                 `protobuf:"bytes,7,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo             string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode           string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode          string                 `protobuf:"bytes,10,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	MedicineName          string                 `protobuf:"bytes,11,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,12,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,13,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	TagName               string                 `protobuf:"bytes,14,opt,name=tagName,proto3" json:"tagName"`
	ShipmentOrderAmount   int64                  `protobuf:"varint,15,opt,name=shipmentOrderAmount,proto3" json:"shipmentOrderAmount"`
	TpCreatedAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	PayDeadline           *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=payDeadline,proto3" json:"payDeadline"`
	ShipmentStatus        string                 `protobuf:"bytes,18,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	PayStatus             string                 `protobuf:"bytes,19,opt,name=payStatus,proto3" json:"payStatus"`
	ErrMsg                string                 `protobuf:"bytes,20,opt,name=errMsg,proto3" json:"errMsg"`
	MiId                  int64                  `protobuf:"varint,21,opt,name=miId,proto3" json:"miId"`
	MiName                string                 `protobuf:"bytes,22,opt,name=miName,proto3" json:"miName"`
	MiCode                string                 `protobuf:"bytes,23,opt,name=miCode,proto3" json:"miCode"`
	ComName               string                 `protobuf:"bytes,24,opt,name=comName,proto3" json:"comName"`
	ComId                 int64                  `protobuf:"varint,25,opt,name=comId,proto3" json:"comId"`
	ComCode               string                 `protobuf:"bytes,26,opt,name=comCode,proto3" json:"comCode"`
}

func (x *PayOrderPlan) Reset() {
	*x = PayOrderPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderPlan) ProtoMessage() {}

func (x *PayOrderPlan) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderPlan.ProtoReflect.Descriptor instead.
func (*PayOrderPlan) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{30}
}

func (x *PayOrderPlan) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *PayOrderPlan) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayOrderPlan) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *PayOrderPlan) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *PayOrderPlan) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *PayOrderPlan) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *PayOrderPlan) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *PayOrderPlan) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *PayOrderPlan) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *PayOrderPlan) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *PayOrderPlan) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *PayOrderPlan) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *PayOrderPlan) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *PayOrderPlan) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *PayOrderPlan) GetShipmentOrderAmount() int64 {
	if x != nil {
		return x.ShipmentOrderAmount
	}
	return 0
}

func (x *PayOrderPlan) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *PayOrderPlan) GetPayDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadline
	}
	return nil
}

func (x *PayOrderPlan) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *PayOrderPlan) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *PayOrderPlan) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *PayOrderPlan) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *PayOrderPlan) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *PayOrderPlan) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *PayOrderPlan) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *PayOrderPlan) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *PayOrderPlan) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

type ListPayOrderPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*PayOrderPlan `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListPayOrderPlanResp) Reset() {
	*x = ListPayOrderPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayOrderPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayOrderPlanResp) ProtoMessage() {}

func (x *ListPayOrderPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayOrderPlanResp.ProtoReflect.Descriptor instead.
func (*ListPayOrderPlanResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{31}
}

func (x *ListPayOrderPlanResp) GetList() []*PayOrderPlan {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListPayOrderPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPayOrderPlanResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPayOrderPlanResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FinishPayOrderErrorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentNo string `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *FinishPayOrderErrorReq) Reset() {
	*x = FinishPayOrderErrorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishPayOrderErrorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishPayOrderErrorReq) ProtoMessage() {}

func (x *FinishPayOrderErrorReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishPayOrderErrorReq.ProtoReflect.Descriptor instead.
func (*FinishPayOrderErrorReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{32}
}

func (x *FinishPayOrderErrorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *FinishPayOrderErrorReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

type FinishPayOrderErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *FinishPayOrderErrorResp) Reset() {
	*x = FinishPayOrderErrorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishPayOrderErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishPayOrderErrorResp) ProtoMessage() {}

func (x *FinishPayOrderErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishPayOrderErrorResp.ProtoReflect.Descriptor instead.
func (*FinishPayOrderErrorResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{33}
}

func (x *FinishPayOrderErrorResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FinishPayOrderErrorResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ListFactoringOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId          int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page               *Page                  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	FactoringOrderNos  []string               `protobuf:"bytes,3,rep,name=factoringOrderNos,proto3" json:"factoringOrderNos"`
	FactoringBankNos   []string               `protobuf:"bytes,4,rep,name=factoringBankNos,proto3" json:"factoringBankNos"`
	MiName             string                 `protobuf:"bytes,5,opt,name=miName,proto3" json:"miName"`
	ComName            string                 `protobuf:"bytes,6,opt,name=comName,proto3" json:"comName"`
	FactoringStatus    []string               `protobuf:"bytes,7,rep,name=factoringStatus,proto3" json:"factoringStatus"`
	ApplyResultStartAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=applyResultStartAt,proto3" json:"applyResultStartAt"`
	ApplyResultEndAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=applyResultEndAt,proto3" json:"applyResultEndAt"`
	RefundStatus       []string               `protobuf:"bytes,10,rep,name=refundStatus,proto3" json:"refundStatus"`
	ApplyStartAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=applyStartAt,proto3" json:"applyStartAt"`
	ApplyEndAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=applyEndAt,proto3" json:"applyEndAt"`
	ComIds             []int64                `protobuf:"varint,13,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds              []int64                `protobuf:"varint,14,rep,packed,name=miIds,proto3" json:"miIds"`
	RefundDateStartAt  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=refundDateStartAt,proto3" json:"refundDateStartAt"`
	RefundDateEndAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=refundDateEndAt,proto3" json:"refundDateEndAt"`
}

func (x *ListFactoringOrderReq) Reset() {
	*x = ListFactoringOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringOrderReq) ProtoMessage() {}

func (x *ListFactoringOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringOrderReq.ProtoReflect.Descriptor instead.
func (*ListFactoringOrderReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{34}
}

func (x *ListFactoringOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListFactoringOrderReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListFactoringOrderReq) GetFactoringOrderNos() []string {
	if x != nil {
		return x.FactoringOrderNos
	}
	return nil
}

func (x *ListFactoringOrderReq) GetFactoringBankNos() []string {
	if x != nil {
		return x.FactoringBankNos
	}
	return nil
}

func (x *ListFactoringOrderReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListFactoringOrderReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ListFactoringOrderReq) GetFactoringStatus() []string {
	if x != nil {
		return x.FactoringStatus
	}
	return nil
}

func (x *ListFactoringOrderReq) GetApplyResultStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyResultStartAt
	}
	return nil
}

func (x *ListFactoringOrderReq) GetApplyResultEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyResultEndAt
	}
	return nil
}

func (x *ListFactoringOrderReq) GetRefundStatus() []string {
	if x != nil {
		return x.RefundStatus
	}
	return nil
}

func (x *ListFactoringOrderReq) GetApplyStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyStartAt
	}
	return nil
}

func (x *ListFactoringOrderReq) GetApplyEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyEndAt
	}
	return nil
}

func (x *ListFactoringOrderReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListFactoringOrderReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ListFactoringOrderReq) GetRefundDateStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundDateStartAt
	}
	return nil
}

func (x *ListFactoringOrderReq) GetRefundDateEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundDateEndAt
	}
	return nil
}

type FactoringOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoringOrderNo   string                 `protobuf:"bytes,1,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	FactoringBankNo    string                 `protobuf:"bytes,2,opt,name=factoringBankNo,proto3" json:"factoringBankNo"`
	MiName             string                 `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiId               int64                  `protobuf:"varint,4,opt,name=miId,proto3" json:"miId"`
	MiCode             string                 `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	CompanyId          int64                  `protobuf:"varint,6,opt,name=companyId,proto3" json:"companyId"`
	CompanyName        string                 `protobuf:"bytes,7,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode        string                 `protobuf:"bytes,8,opt,name=companyCode,proto3" json:"companyCode"`
	FactoringMoney     int64                  `protobuf:"varint,9,opt,name=factoringMoney,proto3" json:"factoringMoney"`
	ActualReceiveMoney int64                  `protobuf:"varint,10,opt,name=actualReceiveMoney,proto3" json:"actualReceiveMoney"`
	PlatformFee        int64                  `protobuf:"varint,11,opt,name=platformFee,proto3" json:"platformFee"`
	ApplyAt            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=applyAt,proto3" json:"applyAt"`
	ApplyResultAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=applyResultAt,proto3" json:"applyResultAt"`
	FactoringStatus    string                 `protobuf:"bytes,14,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundAt           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=refundAt,proto3" json:"refundAt"`
	RefundStatus       string                 `protobuf:"bytes,16,opt,name=refundStatus,proto3" json:"refundStatus"`
	ErrMsg             string                 `protobuf:"bytes,17,opt,name=errMsg,proto3" json:"errMsg"`
	FactoringDeadline  *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=factoringDeadline,proto3" json:"factoringDeadline"`
	BankFee            int64                  `protobuf:"varint,19,opt,name=bankFee,proto3" json:"bankFee"`
	ApplicantNickName  string                 `protobuf:"bytes,20,opt,name=applicantNickName,proto3" json:"applicantNickName"`
	ApplicantId        int64                  `protobuf:"varint,21,opt,name=applicantId,proto3" json:"applicantId"`
	AgreementAt        *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=agreementAt,proto3" json:"agreementAt"`
	AgreementVersion   int64                  `protobuf:"varint,23,opt,name=agreementVersion,proto3" json:"agreementVersion"`
	Id                 int64                  `protobuf:"varint,24,opt,name=id,proto3" json:"id"`
	RefundDate         *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=refundDate,proto3" json:"refundDate"`
}

func (x *FactoringOrder) Reset() {
	*x = FactoringOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrder) ProtoMessage() {}

func (x *FactoringOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrder.ProtoReflect.Descriptor instead.
func (*FactoringOrder) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{35}
}

func (x *FactoringOrder) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *FactoringOrder) GetFactoringBankNo() string {
	if x != nil {
		return x.FactoringBankNo
	}
	return ""
}

func (x *FactoringOrder) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *FactoringOrder) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *FactoringOrder) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *FactoringOrder) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *FactoringOrder) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *FactoringOrder) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *FactoringOrder) GetFactoringMoney() int64 {
	if x != nil {
		return x.FactoringMoney
	}
	return 0
}

func (x *FactoringOrder) GetActualReceiveMoney() int64 {
	if x != nil {
		return x.ActualReceiveMoney
	}
	return 0
}

func (x *FactoringOrder) GetPlatformFee() int64 {
	if x != nil {
		return x.PlatformFee
	}
	return 0
}

func (x *FactoringOrder) GetApplyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyAt
	}
	return nil
}

func (x *FactoringOrder) GetApplyResultAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyResultAt
	}
	return nil
}

func (x *FactoringOrder) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *FactoringOrder) GetRefundAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundAt
	}
	return nil
}

func (x *FactoringOrder) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *FactoringOrder) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *FactoringOrder) GetFactoringDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.FactoringDeadline
	}
	return nil
}

func (x *FactoringOrder) GetBankFee() int64 {
	if x != nil {
		return x.BankFee
	}
	return 0
}

func (x *FactoringOrder) GetApplicantNickName() string {
	if x != nil {
		return x.ApplicantNickName
	}
	return ""
}

func (x *FactoringOrder) GetApplicantId() int64 {
	if x != nil {
		return x.ApplicantId
	}
	return 0
}

func (x *FactoringOrder) GetAgreementAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AgreementAt
	}
	return nil
}

func (x *FactoringOrder) GetAgreementVersion() int64 {
	if x != nil {
		return x.AgreementVersion
	}
	return 0
}

func (x *FactoringOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FactoringOrder) GetRefundDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundDate
	}
	return nil
}

type ListFactoringOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListFactoringOrderResp) Reset() {
	*x = ListFactoringOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringOrderResp) ProtoMessage() {}

func (x *ListFactoringOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringOrderResp.ProtoReflect.Descriptor instead.
func (*ListFactoringOrderResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{36}
}

func (x *ListFactoringOrderResp) GetList() []*FactoringOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListFactoringOrderResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFactoringOrderResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFactoringOrderResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetTransferReceiptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentNo string  `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ComIds     []int64 `protobuf:"varint,3,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds      []int64 `protobuf:"varint,4,rep,packed,name=miIds,proto3" json:"miIds"`
}

func (x *GetTransferReceiptReq) Reset() {
	*x = GetTransferReceiptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferReceiptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferReceiptReq) ProtoMessage() {}

func (x *GetTransferReceiptReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferReceiptReq.ProtoReflect.Descriptor instead.
func (*GetTransferReceiptReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{37}
}

func (x *GetTransferReceiptReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetTransferReceiptReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *GetTransferReceiptReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *GetTransferReceiptReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

type GetTransferReceiptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptUrl string `protobuf:"bytes,1,opt,name=receiptUrl,proto3" json:"receiptUrl"`
}

func (x *GetTransferReceiptResp) Reset() {
	*x = GetTransferReceiptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferReceiptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferReceiptResp) ProtoMessage() {}

func (x *GetTransferReceiptResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferReceiptResp.ProtoReflect.Descriptor instead.
func (*GetTransferReceiptResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{38}
}

func (x *GetTransferReceiptResp) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

type ListFactoringOrderPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId         int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page              *Page    `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	FactoringOrderNos []string `protobuf:"bytes,3,rep,name=factoringOrderNos,proto3" json:"factoringOrderNos"`
	ComIds            []int64  `protobuf:"varint,4,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds             []int64  `protobuf:"varint,5,rep,packed,name=miIds,proto3" json:"miIds"`
}

func (x *ListFactoringOrderPlanReq) Reset() {
	*x = ListFactoringOrderPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringOrderPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringOrderPlanReq) ProtoMessage() {}

func (x *ListFactoringOrderPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringOrderPlanReq.ProtoReflect.Descriptor instead.
func (*ListFactoringOrderPlanReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{39}
}

func (x *ListFactoringOrderPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListFactoringOrderPlanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListFactoringOrderPlanReq) GetFactoringOrderNos() []string {
	if x != nil {
		return x.FactoringOrderNos
	}
	return nil
}

func (x *ListFactoringOrderPlanReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListFactoringOrderPlanReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

type FactoringOrderPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId      int64                  `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	TpOrderNo           string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	OrderNo             string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo"`
	ShipmentAmount      int64                  `protobuf:"varint,4,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount         int64                  `protobuf:"varint,5,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentOrderId     int64                  `protobuf:"varint,6,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo          string                 `protobuf:"bytes,7,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo           string                 `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode         string                 `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode        string                 `protobuf:"bytes,10,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentOrderAmount int64                  `protobuf:"varint,11,opt,name=shipmentOrderAmount,proto3" json:"shipmentOrderAmount"`
	ShipmentStatus      string                 `protobuf:"bytes,12,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ErrMsg              string                 `protobuf:"bytes,13,opt,name=errMsg,proto3" json:"errMsg"`
	FactoringOrderNo    string                 `protobuf:"bytes,14,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	FactoringBankNo     string                 `protobuf:"bytes,15,opt,name=factoringBankNo,proto3" json:"factoringBankNo"`
	SendOutAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	ReceiveDeadline     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	TagName             string                 `protobuf:"bytes,18,opt,name=tagName,proto3" json:"tagName"`
	TpCreatedAt         *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	//发票到期日
	PayDeadline      *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=payDeadline,proto3" json:"payDeadline"`
	FactoringStatus  string                 `protobuf:"bytes,21,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundAt         *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=refundAt,proto3" json:"refundAt"`
	RefundStatus     string                 `protobuf:"bytes,23,opt,name=refundStatus,proto3" json:"refundStatus"`
	MiName           string                 `protobuf:"bytes,25,opt,name=miName,proto3" json:"miName"`
	MiId             int64                  `protobuf:"varint,26,opt,name=miId,proto3" json:"miId"`
	MiCode           string                 `protobuf:"bytes,27,opt,name=miCode,proto3" json:"miCode"`
	CompanyId        int64                  `protobuf:"varint,28,opt,name=companyId,proto3" json:"companyId"`
	CompanyName      string                 `protobuf:"bytes,29,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode      string                 `protobuf:"bytes,30,opt,name=companyCode,proto3" json:"companyCode"`
	MedicineId       int64                  `protobuf:"varint,31,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName     string                 `protobuf:"bytes,32,opt,name=medicineName,proto3" json:"medicineName"`
	InvoiceMd5       string                 `protobuf:"bytes,33,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceUrl       string                 `protobuf:"bytes,34,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceType      string                 `protobuf:"bytes,35,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceTotal     int64                  `protobuf:"varint,36,opt,name=invoiceTotal,proto3" json:"invoiceTotal"`
	InvoiceTax       int64                  `protobuf:"varint,37,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode string                 `protobuf:"bytes,38,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoiceDate      *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=invoiceDate,proto3" json:"invoiceDate"`
	//发票起算日
	ReceiveAt      *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=receiveAt,proto3" json:"receiveAt"`
	MedicineCode   string                 `protobuf:"bytes,41,opt,name=medicineCode,proto3" json:"medicineCode"`
	ApplyAt        *timestamppb.Timestamp `protobuf:"bytes,42,opt,name=applyAt,proto3" json:"applyAt"`
	ApplyResultAt  *timestamppb.Timestamp `protobuf:"bytes,43,opt,name=applyResultAt,proto3" json:"applyResultAt"`
	FactoringMoney int64                  `protobuf:"varint,44,opt,name=factoringMoney,proto3" json:"factoringMoney"`
	ContractNo     string                 `protobuf:"bytes,45,opt,name=contractNo,proto3" json:"contractNo"`
}

func (x *FactoringOrderPlan) Reset() {
	*x = FactoringOrderPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderPlan) ProtoMessage() {}

func (x *FactoringOrderPlan) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderPlan.ProtoReflect.Descriptor instead.
func (*FactoringOrderPlan) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{40}
}

func (x *FactoringOrderPlan) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *FactoringOrderPlan) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *FactoringOrderPlan) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *FactoringOrderPlan) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *FactoringOrderPlan) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetShipmentOrderAmount() int64 {
	if x != nil {
		return x.ShipmentOrderAmount
	}
	return 0
}

func (x *FactoringOrderPlan) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *FactoringOrderPlan) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *FactoringOrderPlan) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetFactoringBankNo() string {
	if x != nil {
		return x.FactoringBankNo
	}
	return ""
}

func (x *FactoringOrderPlan) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *FactoringOrderPlan) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *FactoringOrderPlan) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetPayDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadline
	}
	return nil
}

func (x *FactoringOrderPlan) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *FactoringOrderPlan) GetRefundAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

func (x *FactoringOrderPlan) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *FactoringOrderPlan) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *FactoringOrderPlan) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *FactoringOrderPlan) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *FactoringOrderPlan) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *FactoringOrderPlan) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceTotal() int64 {
	if x != nil {
		return x.InvoiceTotal
	}
	return 0
}

func (x *FactoringOrderPlan) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *FactoringOrderPlan) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *FactoringOrderPlan) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *FactoringOrderPlan) GetApplyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetApplyResultAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyResultAt
	}
	return nil
}

func (x *FactoringOrderPlan) GetFactoringMoney() int64 {
	if x != nil {
		return x.FactoringMoney
	}
	return 0
}

func (x *FactoringOrderPlan) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

type ListFactoringOrderPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderPlan `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListFactoringOrderPlanResp) Reset() {
	*x = ListFactoringOrderPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringOrderPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringOrderPlanResp) ProtoMessage() {}

func (x *ListFactoringOrderPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringOrderPlanResp.ProtoReflect.Descriptor instead.
func (*ListFactoringOrderPlanResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{41}
}

func (x *ListFactoringOrderPlanResp) GetList() []*FactoringOrderPlan {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListFactoringOrderPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFactoringOrderPlanResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFactoringOrderPlanResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FinishFactoringOrderErrorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId        int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	FactoringOrderNo string `protobuf:"bytes,2,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
}

func (x *FinishFactoringOrderErrorReq) Reset() {
	*x = FinishFactoringOrderErrorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishFactoringOrderErrorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishFactoringOrderErrorReq) ProtoMessage() {}

func (x *FinishFactoringOrderErrorReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishFactoringOrderErrorReq.ProtoReflect.Descriptor instead.
func (*FinishFactoringOrderErrorReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{42}
}

func (x *FinishFactoringOrderErrorReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *FinishFactoringOrderErrorReq) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

type FinishFactoringOrderErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *FinishFactoringOrderErrorResp) Reset() {
	*x = FinishFactoringOrderErrorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishFactoringOrderErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishFactoringOrderErrorResp) ProtoMessage() {}

func (x *FinishFactoringOrderErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishFactoringOrderErrorResp.ProtoReflect.Descriptor instead.
func (*FinishFactoringOrderErrorResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{43}
}

func (x *FinishFactoringOrderErrorResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FinishFactoringOrderErrorResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PayShipmentOrdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentNos []string `protobuf:"bytes,2,rep,name=shipmentNos,proto3" json:"shipmentNos"`
}

func (x *PayShipmentOrdersReq) Reset() {
	*x = PayShipmentOrdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayShipmentOrdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayShipmentOrdersReq) ProtoMessage() {}

func (x *PayShipmentOrdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayShipmentOrdersReq.ProtoReflect.Descriptor instead.
func (*PayShipmentOrdersReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{44}
}

func (x *PayShipmentOrdersReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *PayShipmentOrdersReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

type PayShipmentOrdersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *PayShipmentOrdersResp) Reset() {
	*x = PayShipmentOrdersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayShipmentOrdersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayShipmentOrdersResp) ProtoMessage() {}

func (x *PayShipmentOrdersResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayShipmentOrdersResp.ProtoReflect.Descriptor instead.
func (*PayShipmentOrdersResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{45}
}

func (x *PayShipmentOrdersResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayShipmentOrdersResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//支付单汇总
type PayOrderCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate"`
	ManagerId int64                  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64                  `protobuf:"varint,4,opt,name=miId,proto3" json:"miId"`
	CompanyId int64                  `protobuf:"varint,5,opt,name=companyId,proto3" json:"companyId"`
}

func (x *PayOrderCountReq) Reset() {
	*x = PayOrderCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderCountReq) ProtoMessage() {}

func (x *PayOrderCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderCountReq.ProtoReflect.Descriptor instead.
func (*PayOrderCountReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{46}
}

func (x *PayOrderCountReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PayOrderCountReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PayOrderCountReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *PayOrderCountReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *PayOrderCountReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type PayOrderCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderAmount int64 `protobuf:"varint,1,opt,name=payOrderAmount,proto3" json:"payOrderAmount"`
	PayOrderNum    int64 `protobuf:"varint,2,opt,name=payOrderNum,proto3" json:"payOrderNum"`
	WaitNum        int64 `protobuf:"varint,3,opt,name=waitNum,proto3" json:"waitNum"`
}

func (x *PayOrderCountResp) Reset() {
	*x = PayOrderCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderCountResp) ProtoMessage() {}

func (x *PayOrderCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderCountResp.ProtoReflect.Descriptor instead.
func (*PayOrderCountResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{47}
}

func (x *PayOrderCountResp) GetPayOrderAmount() int64 {
	if x != nil {
		return x.PayOrderAmount
	}
	return 0
}

func (x *PayOrderCountResp) GetPayOrderNum() int64 {
	if x != nil {
		return x.PayOrderNum
	}
	return 0
}

func (x *PayOrderCountResp) GetWaitNum() int64 {
	if x != nil {
		return x.WaitNum
	}
	return 0
}

type GetWithdrawReceiptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	OutTradeNo string `protobuf:"bytes,2,opt,name=outTradeNo,proto3" json:"outTradeNo"`
}

func (x *GetWithdrawReceiptReq) Reset() {
	*x = GetWithdrawReceiptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithdrawReceiptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawReceiptReq) ProtoMessage() {}

func (x *GetWithdrawReceiptReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawReceiptReq.ProtoReflect.Descriptor instead.
func (*GetWithdrawReceiptReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{48}
}

func (x *GetWithdrawReceiptReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetWithdrawReceiptReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type GetWithdrawReceiptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptUrl string `protobuf:"bytes,1,opt,name=receiptUrl,proto3" json:"receiptUrl"`
}

func (x *GetWithdrawReceiptResp) Reset() {
	*x = GetWithdrawReceiptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithdrawReceiptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawReceiptResp) ProtoMessage() {}

func (x *GetWithdrawReceiptResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawReceiptResp.ProtoReflect.Descriptor instead.
func (*GetWithdrawReceiptResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{49}
}

func (x *GetWithdrawReceiptResp) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

type ListFactoringPayOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId          int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page               *Page                  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	InvoiceNo          string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode        string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentNo         string                 `protobuf:"bytes,5,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	PayStatus          []string               `protobuf:"bytes,6,rep,name=payStatus,proto3" json:"payStatus"`
	PayType            []string               `protobuf:"bytes,7,rep,name=payType,proto3" json:"payType"`
	MiName             string                 `protobuf:"bytes,8,opt,name=miName,proto3" json:"miName"`
	ComName            string                 `protobuf:"bytes,9,opt,name=comName,proto3" json:"comName"`
	ComCode            string                 `protobuf:"bytes,10,opt,name=comCode,proto3" json:"comCode"`
	PayDeadlineStartAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=payDeadlineStartAt,proto3" json:"payDeadlineStartAt"`
	PayDeadlineEndAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=payDeadlineEndAt,proto3" json:"payDeadlineEndAt"`
	ReceiveStartAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=receiveStartAt,proto3" json:"receiveStartAt"`
	ReceiveEndAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=receiveEndAt,proto3" json:"receiveEndAt"`
	//数据库列并无此项，仅用于区分已发起和未发起保理的支付单 WAITING APPLYING SUCCESS FAIL
	FactoringApplyStatus string  `protobuf:"bytes,15,opt,name=factoringApplyStatus,proto3" json:"factoringApplyStatus"`
	ComIds               []int64 `protobuf:"varint,16,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds                []int64 `protobuf:"varint,17,rep,packed,name=miIds,proto3" json:"miIds"`
	FactoringOrderNo     string  `protobuf:"bytes,18,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
}

func (x *ListFactoringPayOrderReq) Reset() {
	*x = ListFactoringPayOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringPayOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringPayOrderReq) ProtoMessage() {}

func (x *ListFactoringPayOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringPayOrderReq.ProtoReflect.Descriptor instead.
func (*ListFactoringPayOrderReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{50}
}

func (x *ListFactoringPayOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListFactoringPayOrderReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetPayStatus() []string {
	if x != nil {
		return x.PayStatus
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetPayType() []string {
	if x != nil {
		return x.PayType
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetPayDeadlineStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadlineStartAt
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetPayDeadlineEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadlineEndAt
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetReceiveStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveStartAt
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetReceiveEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveEndAt
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetFactoringApplyStatus() string {
	if x != nil {
		return x.FactoringApplyStatus
	}
	return ""
}

func (x *ListFactoringPayOrderReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ListFactoringPayOrderReq) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

type FactoringPayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId     int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo          string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo           string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode         string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode        string                 `protobuf:"bytes,5,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentOrderAmount int64                  `protobuf:"varint,6,opt,name=shipmentOrderAmount,proto3" json:"shipmentOrderAmount"`
	ErrMsg              string                 `protobuf:"bytes,7,opt,name=errMsg,proto3" json:"errMsg"`
	PayAt               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payAt,proto3" json:"payAt"`
	PayType             string                 `protobuf:"bytes,9,opt,name=payType,proto3" json:"payType"`
	PayStatus           string                 `protobuf:"bytes,10,opt,name=payStatus,proto3" json:"payStatus"`
	ReceiveAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=receiveAt,proto3" json:"receiveAt"`
	ReceiptUrl          string                 `protobuf:"bytes,12,opt,name=receiptUrl,proto3" json:"receiptUrl"`
	PayDeadline         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=payDeadline,proto3" json:"payDeadline"`
	MiName              string                 `protobuf:"bytes,14,opt,name=miName,proto3" json:"miName"`
	MiId                int64                  `protobuf:"varint,15,opt,name=miId,proto3" json:"miId"`
	MiCode              string                 `protobuf:"bytes,16,opt,name=miCode,proto3" json:"miCode"`
	CompanyName         string                 `protobuf:"bytes,17,opt,name=companyName,proto3" json:"companyName"`
	CompanyId           int64                  `protobuf:"varint,18,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode         string                 `protobuf:"bytes,19,opt,name=companyCode,proto3" json:"companyCode"`
	FactoringDeadline   *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=factoringDeadline,proto3" json:"factoringDeadline"`
	ApplyAt             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=applyAt,proto3" json:"applyAt"`
	ApplyResultAt       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=applyResultAt,proto3" json:"applyResultAt"`
	FactoringStatus     string                 `protobuf:"bytes,23,opt,name=factoringStatus,proto3" json:"factoringStatus"`
	RefundAt            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=refundAt,proto3" json:"refundAt"`
	RefundStatus        string                 `protobuf:"bytes,25,opt,name=refundStatus,proto3" json:"refundStatus"`
}

func (x *FactoringPayOrder) Reset() {
	*x = FactoringPayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringPayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringPayOrder) ProtoMessage() {}

func (x *FactoringPayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringPayOrder.ProtoReflect.Descriptor instead.
func (*FactoringPayOrder) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{51}
}

func (x *FactoringPayOrder) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *FactoringPayOrder) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *FactoringPayOrder) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *FactoringPayOrder) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *FactoringPayOrder) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *FactoringPayOrder) GetShipmentOrderAmount() int64 {
	if x != nil {
		return x.ShipmentOrderAmount
	}
	return 0
}

func (x *FactoringPayOrder) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *FactoringPayOrder) GetPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayAt
	}
	return nil
}

func (x *FactoringPayOrder) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *FactoringPayOrder) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *FactoringPayOrder) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *FactoringPayOrder) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *FactoringPayOrder) GetPayDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.PayDeadline
	}
	return nil
}

func (x *FactoringPayOrder) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *FactoringPayOrder) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *FactoringPayOrder) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *FactoringPayOrder) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *FactoringPayOrder) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *FactoringPayOrder) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *FactoringPayOrder) GetFactoringDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.FactoringDeadline
	}
	return nil
}

func (x *FactoringPayOrder) GetApplyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyAt
	}
	return nil
}

func (x *FactoringPayOrder) GetApplyResultAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyResultAt
	}
	return nil
}

func (x *FactoringPayOrder) GetFactoringStatus() string {
	if x != nil {
		return x.FactoringStatus
	}
	return ""
}

func (x *FactoringPayOrder) GetRefundAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundAt
	}
	return nil
}

func (x *FactoringPayOrder) GetRefundStatus() string {
	if x != nil {
		return x.RefundStatus
	}
	return ""
}

type ListFactoringPayOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringPayOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListFactoringPayOrderResp) Reset() {
	*x = ListFactoringPayOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFactoringPayOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFactoringPayOrderResp) ProtoMessage() {}

func (x *ListFactoringPayOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFactoringPayOrderResp.ProtoReflect.Descriptor instead.
func (*ListFactoringPayOrderResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{52}
}

func (x *ListFactoringPayOrderResp) GetList() []*FactoringPayOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListFactoringPayOrderResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFactoringPayOrderResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFactoringPayOrderResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentNos []string `protobuf:"bytes,2,rep,name=shipmentNos,proto3" json:"shipmentNos"`
	//需要重试发起的保理订单，只允许单笔
	FactoringOrderNo string `protobuf:"bytes,3,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
}

func (x *ApplyReq) Reset() {
	*x = ApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReq) ProtoMessage() {}

func (x *ApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReq.ProtoReflect.Descriptor instead.
func (*ApplyReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{53}
}

func (x *ApplyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ApplyReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

func (x *ApplyReq) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

type ApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *ApplyResp) Reset() {
	*x = ApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResp) ProtoMessage() {}

func (x *ApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResp.ProtoReflect.Descriptor instead.
func (*ApplyResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{54}
}

func (x *ApplyResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ApplyResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ListCnapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	BankName  string `protobuf:"bytes,2,opt,name=bankName,proto3" json:"bankName"`
	Cnap      string `protobuf:"bytes,3,opt,name=cnap,proto3" json:"cnap"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *ListCnapsReq) Reset() {
	*x = ListCnapsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCnapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCnapsReq) ProtoMessage() {}

func (x *ListCnapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCnapsReq.ProtoReflect.Descriptor instead.
func (*ListCnapsReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{55}
}

func (x *ListCnapsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListCnapsReq) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ListCnapsReq) GetCnap() string {
	if x != nil {
		return x.Cnap
	}
	return ""
}

func (x *ListCnapsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListCnapsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CnapsVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListCnapsResp) Reset() {
	*x = ListCnapsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCnapsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCnapsResp) ProtoMessage() {}

func (x *ListCnapsResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCnapsResp.ProtoReflect.Descriptor instead.
func (*ListCnapsResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{56}
}

func (x *ListCnapsResp) GetList() []*CnapsVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCnapsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCnapsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCnapsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CnapsVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnapId   int64  `protobuf:"varint,1,opt,name=cnapId,proto3" json:"cnapId"`
	Cnap     string `protobuf:"bytes,2,opt,name=cnap,proto3" json:"cnap"`
	BankName string `protobuf:"bytes,3,opt,name=bankName,proto3" json:"bankName"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address"`
}

func (x *CnapsVo) Reset() {
	*x = CnapsVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnapsVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnapsVo) ProtoMessage() {}

func (x *CnapsVo) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnapsVo.ProtoReflect.Descriptor instead.
func (*CnapsVo) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{57}
}

func (x *CnapsVo) GetCnapId() int64 {
	if x != nil {
		return x.CnapId
	}
	return 0
}

func (x *CnapsVo) GetCnap() string {
	if x != nil {
		return x.Cnap
	}
	return ""
}

func (x *CnapsVo) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CnapsVo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetMiSpecialConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiCode    string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiId      int64  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	MiName    string `protobuf:"bytes,4,opt,name=miName,proto3" json:"miName"`
	Page      *Page  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
}

func (x *GetMiSpecialConfigReq) Reset() {
	*x = GetMiSpecialConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiSpecialConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiSpecialConfigReq) ProtoMessage() {}

func (x *GetMiSpecialConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiSpecialConfigReq.ProtoReflect.Descriptor instead.
func (*GetMiSpecialConfigReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{58}
}

func (x *GetMiSpecialConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiSpecialConfigReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *GetMiSpecialConfigReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetMiSpecialConfigReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *GetMiSpecialConfigReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type UpdateMiSpecialConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId       int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiCode          string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	LimitBalance    int64  `protobuf:"varint,3,opt,name=limitBalance,proto3" json:"limitBalance"`
	OldLimitBalance int64  `protobuf:"varint,4,opt,name=oldLimitBalance,proto3" json:"oldLimitBalance"`
}

func (x *UpdateMiSpecialConfigReq) Reset() {
	*x = UpdateMiSpecialConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiSpecialConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiSpecialConfigReq) ProtoMessage() {}

func (x *UpdateMiSpecialConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiSpecialConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateMiSpecialConfigReq) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateMiSpecialConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateMiSpecialConfigReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *UpdateMiSpecialConfigReq) GetLimitBalance() int64 {
	if x != nil {
		return x.LimitBalance
	}
	return 0
}

func (x *UpdateMiSpecialConfigReq) GetOldLimitBalance() int64 {
	if x != nil {
		return x.OldLimitBalance
	}
	return 0
}

type UpdateMiSpecialConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMiSpecialConfigResp) Reset() {
	*x = UpdateMiSpecialConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiSpecialConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiSpecialConfigResp) ProtoMessage() {}

func (x *UpdateMiSpecialConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiSpecialConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateMiSpecialConfigResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{60}
}

type MiSpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId          int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName        string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	LimitBalance  int64  `protobuf:"varint,4,opt,name=limitBalance,proto3" json:"limitBalance"`
	BankAccountId int64  `protobuf:"varint,5,opt,name=bankAccountId,proto3" json:"bankAccountId"`
	ManagerName   string `protobuf:"bytes,6,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone  string `protobuf:"bytes,7,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province      string `protobuf:"bytes,8,opt,name=province,proto3" json:"province"`
	City          string `protobuf:"bytes,9,opt,name=city,proto3" json:"city"`
	Zone          string `protobuf:"bytes,10,opt,name=zone,proto3" json:"zone"`
	ConfigId      int64  `protobuf:"varint,11,opt,name=configId,proto3" json:"configId"`
}

func (x *MiSpecialConfig) Reset() {
	*x = MiSpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiSpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiSpecialConfig) ProtoMessage() {}

func (x *MiSpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiSpecialConfig.ProtoReflect.Descriptor instead.
func (*MiSpecialConfig) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{61}
}

func (x *MiSpecialConfig) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiSpecialConfig) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MiSpecialConfig) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiSpecialConfig) GetLimitBalance() int64 {
	if x != nil {
		return x.LimitBalance
	}
	return 0
}

func (x *MiSpecialConfig) GetBankAccountId() int64 {
	if x != nil {
		return x.BankAccountId
	}
	return 0
}

func (x *MiSpecialConfig) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *MiSpecialConfig) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *MiSpecialConfig) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MiSpecialConfig) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MiSpecialConfig) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *MiSpecialConfig) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type GetMiSpecialConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiSpecialConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMiSpecialConfigResp) Reset() {
	*x = GetMiSpecialConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BankService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiSpecialConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiSpecialConfigResp) ProtoMessage() {}

func (x *GetMiSpecialConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_BankService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiSpecialConfigResp.ProtoReflect.Descriptor instead.
func (*GetMiSpecialConfigResp) Descriptor() ([]byte, []int) {
	return file_BankService_proto_rawDescGZIP(), []int{62}
}

func (x *GetMiSpecialConfigResp) GetList() []*MiSpecialConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMiSpecialConfigResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMiSpecialConfigResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMiSpecialConfigResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

var File_BankService_proto protoreflect.FileDescriptor

var file_BankService_proto_rawDesc = []byte{
	0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x42, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x66, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe8,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6b, 0x62, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x62, 0x6f, 0x6b, 0x62, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x62, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x61, 0x62, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x76, 0x72, 0x61, 0x6d, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x76, 0x72, 0x61, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x70,
	0x61, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x70, 0x61, 0x6d,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x62, 0x6b, 0x6e, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x62, 0x6b, 0x6e, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62,
	0x6b, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x75, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x22, 0xae, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8b, 0x02,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x70, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x62,
	0x6b, 0x6e, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x62, 0x6b, 0x6e,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x62, 0x6b, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xce, 0x05, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x06, 0x0a, 0x08, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x22, 0x88, 0x07, 0x0a, 0x0c, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x56, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0x3f, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x84, 0x06, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x86, 0x08,
	0x0a, 0x0e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x46, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x11,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x46, 0x65,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x49, 0x64, 0x73, 0x22, 0xe8, 0x0d, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f,
	0x75, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x64, 0x35,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x78, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x41, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x22, 0xa3,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x45,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x56, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x22, 0x3d, 0x0a,
	0x15, 0x50, 0x61, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd2, 0x01, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x22, 0x38, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xe9, 0x05, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x70, 0x61, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x10, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xfb, 0x07, 0x0a, 0x11, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x08, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x22, 0x31, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6e, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6e, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x07, 0x43, 0x6e, 0x61, 0x70,
	0x73, 0x56, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6e, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6e, 0x61, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc5, 0x02, 0x0a, 0x0f, 0x4d, 0x69, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x9c,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xc8, 0x0b,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6e, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x78, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x22, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x23, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x69, 0x6d,
	0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xac, 0x04, 0x0a, 0x17, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x57, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x23, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x12, 0x22, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x11, 0x50,
	0x61, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf5, 0x03, 0x0a, 0x15, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x66, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x26, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x29, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x15, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x21, 0x5a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BankService_proto_rawDescOnce sync.Once
	file_BankService_proto_rawDescData = file_BankService_proto_rawDesc
)

func file_BankService_proto_rawDescGZIP() []byte {
	file_BankService_proto_rawDescOnce.Do(func() {
		file_BankService_proto_rawDescData = protoimpl.X.CompressGZIP(file_BankService_proto_rawDescData)
	})
	return file_BankService_proto_rawDescData
}

var file_BankService_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_BankService_proto_goTypes = []interface{}{
	(*Page)(nil),                              // 0: BankService.Page
	(*ListBankAccountReq)(nil),                // 1: BankService.ListBankAccountReq
	(*ListBankAccountResp)(nil),               // 2: BankService.ListBankAccountResp
	(*ListBankAccountVo)(nil),                 // 3: BankService.ListBankAccountVo
	(*CreateOneAccountInfoReq)(nil),           // 4: BankService.CreateOneAccountInfoReq
	(*AccountInfo)(nil),                       // 5: BankService.AccountInfo
	(*CreateOneAccountInfoResp)(nil),          // 6: BankService.CreateOneAccountInfoResp
	(*UpdateBankAccountListReq)(nil),          // 7: BankService.UpdateBankAccountListReq
	(*UpdateBankAccountListResp)(nil),         // 8: BankService.UpdateBankAccountListResp
	(*UpdateBankAccountReq)(nil),              // 9: BankService.UpdateBankAccountReq
	(*UpdateBankAccountResp)(nil),             // 10: BankService.UpdateBankAccountResp
	(*GetCompanyCreditConfigsReq)(nil),        // 11: BankService.GetCompanyCreditConfigsReq
	(*GetCurrentCompanyCreditConfigsReq)(nil), // 12: BankService.GetCurrentCompanyCreditConfigsReq
	(*CompanyCredit)(nil),                     // 13: BankService.CompanyCredit
	(*GetCompanyCreditConfigsResp)(nil),       // 14: BankService.GetCompanyCreditConfigsResp
	(*UpdateCompanyCreditConfigReq)(nil),      // 15: BankService.UpdateCompanyCreditConfigReq
	(*UpdateCompanyCreditConfigResp)(nil),     // 16: BankService.UpdateCompanyCreditConfigResp
	(*GetCompanyBankAccountDetailReq)(nil),    // 17: BankService.GetCompanyBankAccountDetailReq
	(*GetCompanyBankAccountDetailResp)(nil),   // 18: BankService.GetCompanyBankAccountDetailResp
	(*CompanyWithdrawReq)(nil),                // 19: BankService.CompanyWithdrawReq
	(*ReimbursementReq)(nil),                  // 20: BankService.ReimbursementReq
	(*ReimbursementResp)(nil),                 // 21: BankService.ReimbursementResp
	(*CompanyWithdrawResp)(nil),               // 22: BankService.CompanyWithdrawResp
	(*ListCompanyWithdrawReq)(nil),            // 23: BankService.ListCompanyWithdrawReq
	(*CompanyWithdraw)(nil),                   // 24: BankService.CompanyWithdraw
	(*ListCompanyWithdrawResp)(nil),           // 25: BankService.ListCompanyWithdrawResp
	(*ListPayOrderReq)(nil),                   // 26: BankService.ListPayOrderReq
	(*PayOrder)(nil),                          // 27: BankService.PayOrder
	(*ListPayOrderResp)(nil),                  // 28: BankService.ListPayOrderResp
	(*ListPayOrderPlanReq)(nil),               // 29: BankService.ListPayOrderPlanReq
	(*PayOrderPlan)(nil),                      // 30: BankService.PayOrderPlan
	(*ListPayOrderPlanResp)(nil),              // 31: BankService.ListPayOrderPlanResp
	(*FinishPayOrderErrorReq)(nil),            // 32: BankService.FinishPayOrderErrorReq
	(*FinishPayOrderErrorResp)(nil),           // 33: BankService.FinishPayOrderErrorResp
	(*ListFactoringOrderReq)(nil),             // 34: BankService.ListFactoringOrderReq
	(*FactoringOrder)(nil),                    // 35: BankService.FactoringOrder
	(*ListFactoringOrderResp)(nil),            // 36: BankService.ListFactoringOrderResp
	(*GetTransferReceiptReq)(nil),             // 37: BankService.GetTransferReceiptReq
	(*GetTransferReceiptResp)(nil),            // 38: BankService.GetTransferReceiptResp
	(*ListFactoringOrderPlanReq)(nil),         // 39: BankService.ListFactoringOrderPlanReq
	(*FactoringOrderPlan)(nil),                // 40: BankService.FactoringOrderPlan
	(*ListFactoringOrderPlanResp)(nil),        // 41: BankService.ListFactoringOrderPlanResp
	(*FinishFactoringOrderErrorReq)(nil),      // 42: BankService.FinishFactoringOrderErrorReq
	(*FinishFactoringOrderErrorResp)(nil),     // 43: BankService.FinishFactoringOrderErrorResp
	(*PayShipmentOrdersReq)(nil),              // 44: BankService.PayShipmentOrdersReq
	(*PayShipmentOrdersResp)(nil),             // 45: BankService.PayShipmentOrdersResp
	(*PayOrderCountReq)(nil),                  // 46: BankService.PayOrderCountReq
	(*PayOrderCountResp)(nil),                 // 47: BankService.PayOrderCountResp
	(*GetWithdrawReceiptReq)(nil),             // 48: BankService.GetWithdrawReceiptReq
	(*GetWithdrawReceiptResp)(nil),            // 49: BankService.GetWithdrawReceiptResp
	(*ListFactoringPayOrderReq)(nil),          // 50: BankService.ListFactoringPayOrderReq
	(*FactoringPayOrder)(nil),                 // 51: BankService.FactoringPayOrder
	(*ListFactoringPayOrderResp)(nil),         // 52: BankService.ListFactoringPayOrderResp
	(*ApplyReq)(nil),                          // 53: BankService.ApplyReq
	(*ApplyResp)(nil),                         // 54: BankService.ApplyResp
	(*ListCnapsReq)(nil),                      // 55: BankService.ListCnapsReq
	(*ListCnapsResp)(nil),                     // 56: BankService.ListCnapsResp
	(*CnapsVo)(nil),                           // 57: BankService.CnapsVo
	(*GetMiSpecialConfigReq)(nil),             // 58: BankService.GetMiSpecialConfigReq
	(*UpdateMiSpecialConfigReq)(nil),          // 59: BankService.UpdateMiSpecialConfigReq
	(*UpdateMiSpecialConfigResp)(nil),         // 60: BankService.UpdateMiSpecialConfigResp
	(*MiSpecialConfig)(nil),                   // 61: BankService.MiSpecialConfig
	(*GetMiSpecialConfigResp)(nil),            // 62: BankService.GetMiSpecialConfigResp
	(*timestamppb.Timestamp)(nil),             // 63: google.protobuf.Timestamp
}
var file_BankService_proto_depIdxs = []int32{
	3,   // 0: BankService.ListBankAccountResp.list:type_name -> BankService.ListBankAccountVo
	63,  // 1: BankService.ListBankAccountVo.createdAt:type_name -> google.protobuf.Timestamp
	5,   // 2: BankService.CreateOneAccountInfoReq.list:type_name -> BankService.AccountInfo
	5,   // 3: BankService.UpdateBankAccountListReq.list:type_name -> BankService.AccountInfo
	0,   // 4: BankService.GetCompanyCreditConfigsReq.page:type_name -> BankService.Page
	63,  // 5: BankService.CompanyCredit.startAt:type_name -> google.protobuf.Timestamp
	63,  // 6: BankService.CompanyCredit.endAt:type_name -> google.protobuf.Timestamp
	13,  // 7: BankService.GetCompanyCreditConfigsResp.list:type_name -> BankService.CompanyCredit
	63,  // 8: BankService.UpdateCompanyCreditConfigReq.startAt:type_name -> google.protobuf.Timestamp
	63,  // 9: BankService.UpdateCompanyCreditConfigReq.endAt:type_name -> google.protobuf.Timestamp
	63,  // 10: BankService.GetCompanyBankAccountDetailResp.createAt:type_name -> google.protobuf.Timestamp
	0,   // 11: BankService.ListCompanyWithdrawReq.page:type_name -> BankService.Page
	63,  // 12: BankService.ListCompanyWithdrawReq.payStartAt:type_name -> google.protobuf.Timestamp
	63,  // 13: BankService.ListCompanyWithdrawReq.payEndAt:type_name -> google.protobuf.Timestamp
	63,  // 14: BankService.CompanyWithdraw.payAt:type_name -> google.protobuf.Timestamp
	63,  // 15: BankService.CompanyWithdraw.createAt:type_name -> google.protobuf.Timestamp
	24,  // 16: BankService.ListCompanyWithdrawResp.list:type_name -> BankService.CompanyWithdraw
	0,   // 17: BankService.ListPayOrderReq.page:type_name -> BankService.Page
	63,  // 18: BankService.ListPayOrderReq.payDeadlineStartAt:type_name -> google.protobuf.Timestamp
	63,  // 19: BankService.ListPayOrderReq.payDeadlineEndAt:type_name -> google.protobuf.Timestamp
	63,  // 20: BankService.ListPayOrderReq.receiveStartAt:type_name -> google.protobuf.Timestamp
	63,  // 21: BankService.ListPayOrderReq.receiveEndAt:type_name -> google.protobuf.Timestamp
	63,  // 22: BankService.PayOrder.payAt:type_name -> google.protobuf.Timestamp
	63,  // 23: BankService.PayOrder.receiveAt:type_name -> google.protobuf.Timestamp
	63,  // 24: BankService.PayOrder.payDeadline:type_name -> google.protobuf.Timestamp
	27,  // 25: BankService.ListPayOrderResp.list:type_name -> BankService.PayOrder
	0,   // 26: BankService.ListPayOrderPlanReq.page:type_name -> BankService.Page
	63,  // 27: BankService.PayOrderPlan.tpCreatedAt:type_name -> google.protobuf.Timestamp
	63,  // 28: BankService.PayOrderPlan.payDeadline:type_name -> google.protobuf.Timestamp
	30,  // 29: BankService.ListPayOrderPlanResp.list:type_name -> BankService.PayOrderPlan
	0,   // 30: BankService.ListFactoringOrderReq.page:type_name -> BankService.Page
	63,  // 31: BankService.ListFactoringOrderReq.applyResultStartAt:type_name -> google.protobuf.Timestamp
	63,  // 32: BankService.ListFactoringOrderReq.applyResultEndAt:type_name -> google.protobuf.Timestamp
	63,  // 33: BankService.ListFactoringOrderReq.applyStartAt:type_name -> google.protobuf.Timestamp
	63,  // 34: BankService.ListFactoringOrderReq.applyEndAt:type_name -> google.protobuf.Timestamp
	63,  // 35: BankService.ListFactoringOrderReq.refundDateStartAt:type_name -> google.protobuf.Timestamp
	63,  // 36: BankService.ListFactoringOrderReq.refundDateEndAt:type_name -> google.protobuf.Timestamp
	63,  // 37: BankService.FactoringOrder.applyAt:type_name -> google.protobuf.Timestamp
	63,  // 38: BankService.FactoringOrder.applyResultAt:type_name -> google.protobuf.Timestamp
	63,  // 39: BankService.FactoringOrder.refundAt:type_name -> google.protobuf.Timestamp
	63,  // 40: BankService.FactoringOrder.factoringDeadline:type_name -> google.protobuf.Timestamp
	63,  // 41: BankService.FactoringOrder.agreementAt:type_name -> google.protobuf.Timestamp
	63,  // 42: BankService.FactoringOrder.refundDate:type_name -> google.protobuf.Timestamp
	35,  // 43: BankService.ListFactoringOrderResp.list:type_name -> BankService.FactoringOrder
	0,   // 44: BankService.ListFactoringOrderPlanReq.page:type_name -> BankService.Page
	63,  // 45: BankService.FactoringOrderPlan.sendOutAt:type_name -> google.protobuf.Timestamp
	63,  // 46: BankService.FactoringOrderPlan.receiveDeadline:type_name -> google.protobuf.Timestamp
	63,  // 47: BankService.FactoringOrderPlan.tpCreatedAt:type_name -> google.protobuf.Timestamp
	63,  // 48: BankService.FactoringOrderPlan.payDeadline:type_name -> google.protobuf.Timestamp
	63,  // 49: BankService.FactoringOrderPlan.refundAt:type_name -> google.protobuf.Timestamp
	63,  // 50: BankService.FactoringOrderPlan.invoiceDate:type_name -> google.protobuf.Timestamp
	63,  // 51: BankService.FactoringOrderPlan.receiveAt:type_name -> google.protobuf.Timestamp
	63,  // 52: BankService.FactoringOrderPlan.applyAt:type_name -> google.protobuf.Timestamp
	63,  // 53: BankService.FactoringOrderPlan.applyResultAt:type_name -> google.protobuf.Timestamp
	40,  // 54: BankService.ListFactoringOrderPlanResp.list:type_name -> BankService.FactoringOrderPlan
	63,  // 55: BankService.PayOrderCountReq.startDate:type_name -> google.protobuf.Timestamp
	63,  // 56: BankService.PayOrderCountReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 57: BankService.ListFactoringPayOrderReq.page:type_name -> BankService.Page
	63,  // 58: BankService.ListFactoringPayOrderReq.payDeadlineStartAt:type_name -> google.protobuf.Timestamp
	63,  // 59: BankService.ListFactoringPayOrderReq.payDeadlineEndAt:type_name -> google.protobuf.Timestamp
	63,  // 60: BankService.ListFactoringPayOrderReq.receiveStartAt:type_name -> google.protobuf.Timestamp
	63,  // 61: BankService.ListFactoringPayOrderReq.receiveEndAt:type_name -> google.protobuf.Timestamp
	63,  // 62: BankService.FactoringPayOrder.payAt:type_name -> google.protobuf.Timestamp
	63,  // 63: BankService.FactoringPayOrder.receiveAt:type_name -> google.protobuf.Timestamp
	63,  // 64: BankService.FactoringPayOrder.payDeadline:type_name -> google.protobuf.Timestamp
	63,  // 65: BankService.FactoringPayOrder.factoringDeadline:type_name -> google.protobuf.Timestamp
	63,  // 66: BankService.FactoringPayOrder.applyAt:type_name -> google.protobuf.Timestamp
	63,  // 67: BankService.FactoringPayOrder.applyResultAt:type_name -> google.protobuf.Timestamp
	63,  // 68: BankService.FactoringPayOrder.refundAt:type_name -> google.protobuf.Timestamp
	51,  // 69: BankService.ListFactoringPayOrderResp.list:type_name -> BankService.FactoringPayOrder
	0,   // 70: BankService.ListCnapsReq.page:type_name -> BankService.Page
	57,  // 71: BankService.ListCnapsResp.list:type_name -> BankService.CnapsVo
	0,   // 72: BankService.GetMiSpecialConfigReq.page:type_name -> BankService.Page
	61,  // 73: BankService.GetMiSpecialConfigResp.list:type_name -> BankService.MiSpecialConfig
	55,  // 74: BankService.BankService.ListCnaps:input_type -> BankService.ListCnapsReq
	1,   // 75: BankService.BankService.ListBankAccount:input_type -> BankService.ListBankAccountReq
	4,   // 76: BankService.BankService.CreateOneAccountInfo:input_type -> BankService.CreateOneAccountInfoReq
	9,   // 77: BankService.BankService.UpdateBankAccount:input_type -> BankService.UpdateBankAccountReq
	7,   // 78: BankService.BankService.UpdateBankAccountList:input_type -> BankService.UpdateBankAccountListReq
	11,  // 79: BankService.BankService.GetCompanyCreditConfigs:input_type -> BankService.GetCompanyCreditConfigsReq
	15,  // 80: BankService.BankService.UpdateCompanyCreditConfig:input_type -> BankService.UpdateCompanyCreditConfigReq
	12,  // 81: BankService.BankService.GetCurrentCompanyCreditConfigs:input_type -> BankService.GetCurrentCompanyCreditConfigsReq
	58,  // 82: BankService.BankService.GetMiSpecialConfig:input_type -> BankService.GetMiSpecialConfigReq
	59,  // 83: BankService.BankService.UpdateMiSpecialConfig:input_type -> BankService.UpdateMiSpecialConfigReq
	17,  // 84: BankService.BankService.GetCompanyBankAccountDetail:input_type -> BankService.GetCompanyBankAccountDetailReq
	19,  // 85: BankService.BankService.CompanyWithdraw:input_type -> BankService.CompanyWithdrawReq
	48,  // 86: BankService.BankService.GetWithdrawReceipt:input_type -> BankService.GetWithdrawReceiptReq
	23,  // 87: BankService.BankService.ListCompanyWithdraw:input_type -> BankService.ListCompanyWithdrawReq
	20,  // 88: BankService.BankService.Reimbursement:input_type -> BankService.ReimbursementReq
	26,  // 89: BankService.ShipmentPayOrderService.ListPayOrder:input_type -> BankService.ListPayOrderReq
	29,  // 90: BankService.ShipmentPayOrderService.ListPayOrderPlan:input_type -> BankService.ListPayOrderPlanReq
	32,  // 91: BankService.ShipmentPayOrderService.FinishPayOrderError:input_type -> BankService.FinishPayOrderErrorReq
	37,  // 92: BankService.ShipmentPayOrderService.GetTransferReceipt:input_type -> BankService.GetTransferReceiptReq
	44,  // 93: BankService.ShipmentPayOrderService.PayShipmentOrders:input_type -> BankService.PayShipmentOrdersReq
	46,  // 94: BankService.ShipmentPayOrderService.PayOrderCount:input_type -> BankService.PayOrderCountReq
	34,  // 95: BankService.FactoringOrderService.ListFactoringOrder:input_type -> BankService.ListFactoringOrderReq
	50,  // 96: BankService.FactoringOrderService.ListFactoringPayOrder:input_type -> BankService.ListFactoringPayOrderReq
	39,  // 97: BankService.FactoringOrderService.ListFactoringOrderPlan:input_type -> BankService.ListFactoringOrderPlanReq
	42,  // 98: BankService.FactoringOrderService.FinishFactoringOrderError:input_type -> BankService.FinishFactoringOrderErrorReq
	53,  // 99: BankService.FactoringOrderService.Apply:input_type -> BankService.ApplyReq
	56,  // 100: BankService.BankService.ListCnaps:output_type -> BankService.ListCnapsResp
	2,   // 101: BankService.BankService.ListBankAccount:output_type -> BankService.ListBankAccountResp
	6,   // 102: BankService.BankService.CreateOneAccountInfo:output_type -> BankService.CreateOneAccountInfoResp
	10,  // 103: BankService.BankService.UpdateBankAccount:output_type -> BankService.UpdateBankAccountResp
	8,   // 104: BankService.BankService.UpdateBankAccountList:output_type -> BankService.UpdateBankAccountListResp
	14,  // 105: BankService.BankService.GetCompanyCreditConfigs:output_type -> BankService.GetCompanyCreditConfigsResp
	16,  // 106: BankService.BankService.UpdateCompanyCreditConfig:output_type -> BankService.UpdateCompanyCreditConfigResp
	13,  // 107: BankService.BankService.GetCurrentCompanyCreditConfigs:output_type -> BankService.CompanyCredit
	62,  // 108: BankService.BankService.GetMiSpecialConfig:output_type -> BankService.GetMiSpecialConfigResp
	60,  // 109: BankService.BankService.UpdateMiSpecialConfig:output_type -> BankService.UpdateMiSpecialConfigResp
	18,  // 110: BankService.BankService.GetCompanyBankAccountDetail:output_type -> BankService.GetCompanyBankAccountDetailResp
	22,  // 111: BankService.BankService.CompanyWithdraw:output_type -> BankService.CompanyWithdrawResp
	49,  // 112: BankService.BankService.GetWithdrawReceipt:output_type -> BankService.GetWithdrawReceiptResp
	25,  // 113: BankService.BankService.ListCompanyWithdraw:output_type -> BankService.ListCompanyWithdrawResp
	21,  // 114: BankService.BankService.Reimbursement:output_type -> BankService.ReimbursementResp
	28,  // 115: BankService.ShipmentPayOrderService.ListPayOrder:output_type -> BankService.ListPayOrderResp
	31,  // 116: BankService.ShipmentPayOrderService.ListPayOrderPlan:output_type -> BankService.ListPayOrderPlanResp
	33,  // 117: BankService.ShipmentPayOrderService.FinishPayOrderError:output_type -> BankService.FinishPayOrderErrorResp
	38,  // 118: BankService.ShipmentPayOrderService.GetTransferReceipt:output_type -> BankService.GetTransferReceiptResp
	45,  // 119: BankService.ShipmentPayOrderService.PayShipmentOrders:output_type -> BankService.PayShipmentOrdersResp
	47,  // 120: BankService.ShipmentPayOrderService.PayOrderCount:output_type -> BankService.PayOrderCountResp
	36,  // 121: BankService.FactoringOrderService.ListFactoringOrder:output_type -> BankService.ListFactoringOrderResp
	52,  // 122: BankService.FactoringOrderService.ListFactoringPayOrder:output_type -> BankService.ListFactoringPayOrderResp
	41,  // 123: BankService.FactoringOrderService.ListFactoringOrderPlan:output_type -> BankService.ListFactoringOrderPlanResp
	43,  // 124: BankService.FactoringOrderService.FinishFactoringOrderError:output_type -> BankService.FinishFactoringOrderErrorResp
	54,  // 125: BankService.FactoringOrderService.Apply:output_type -> BankService.ApplyResp
	100, // [100:126] is the sub-list for method output_type
	74,  // [74:100] is the sub-list for method input_type
	74,  // [74:74] is the sub-list for extension type_name
	74,  // [74:74] is the sub-list for extension extendee
	0,   // [0:74] is the sub-list for field type_name
}

func init() { file_BankService_proto_init() }
func file_BankService_proto_init() {
	if File_BankService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BankService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBankAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBankAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBankAccountVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneAccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBankAccountListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBankAccountListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBankAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBankAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyCreditConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentCompanyCreditConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyCreditConfigsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCompanyCreditConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCompanyCreditConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyBankAccountDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyBankAccountDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayOrderPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayOrderPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishPayOrderErrorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishPayOrderErrorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferReceiptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferReceiptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringOrderPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringOrderPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishFactoringOrderErrorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishFactoringOrderErrorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayShipmentOrdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayShipmentOrdersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWithdrawReceiptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWithdrawReceiptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringPayOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringPayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFactoringPayOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCnapsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCnapsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnapsVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiSpecialConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiSpecialConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiSpecialConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiSpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BankService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiSpecialConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BankService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_BankService_proto_goTypes,
		DependencyIndexes: file_BankService_proto_depIdxs,
		MessageInfos:      file_BankService_proto_msgTypes,
	}.Build()
	File_BankService_proto = out.File
	file_BankService_proto_rawDesc = nil
	file_BankService_proto_goTypes = nil
	file_BankService_proto_depIdxs = nil
}
